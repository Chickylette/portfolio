variables
{
	global:
		0: InstantMoney
		1: BloodStone
		4: MPSLeft
		5: MPSRight
		6: UpgradeShopSpawn
		7: UpgradeShopExitGround
		8: UpgradeShopExitTop
		9: UpgradeSwitchShop
		10: AbilityShopSpawn
		11: AbilityShopExitLeft
		12: AbilityShopExitRight
		13: AbilitySwitchShop
		14: USpeed
		15: UHealPerSec
		16: UHealth
		17: UObjectiveMultiplier
		18: UDamage
		19: UProjectileSpeed
		20: UDecreaseSpeed
		21: A1
		22: A2
		23: AUlt
		24: ALifesteal
		25: AInvincibility
		26: AFlight
		27: AIfrit
		28: AFastUlt
		29: AAutoReload
		30: ANoCD
		31: BonusMPS
		32: UCredits
		34: Wave
		35: Sec
		36: AFastShop
		37: Ifrit
		38: Hellfire
		40: Shiva
		41: Ramuh
		42: Leviathan
		43: Odin
		44: Bahamut
		45: RandomPlayer
		46: Timer
		47: Enemy
		48: Dummy
		49: Wave1
		50: Wave2
		51: Wave3
		52: Bolt
		53: WaveDamage
		54: Zentetsuken
		55: ZenDmg
		56: Megaflare
		57: UHealReceived
		58: UDamageReceived
		59: AShiva
		60: ARamuh
		61: ALeviathan
		62: AOdin
		63: ABahamut
		64: Summon
		65: SummonReward
		66: SphereRadius
		70: RotationDirection
		71: EntityContainer
		72: VisibilityFlags
		74: RandomSummon

	player:
		0: money
		1: moneyPerSecond
		2: moneyPerKill
		3: objectiveMultiplier
		4: healthPercentage
		5: damagePercentage
		6: projectileSpeed
		7: healPerSecond
		8: speed
		10: level
		11: shopNr
		12: ability1
		13: ability2
		14: noCD
		15: ultAbility
		16: superUlt
		17: autoReload
		18: ifrit
		19: lifesteal
		20: flight
		21: invincibility
		22: speedMax
		23: ultPercentage
		24: tempPosition
		25: tempFacing
		26: objectiveTimer
		27: fastShop
		28: projectileGravity
		29: healReceived
		30: damageReceived
		31: randomFreeze
		32: randomStun
		33: shiva
		34: ramuh
		35: leviathan
		36: odin
		37: bahamut
		38: twin
		39: FocusPoint
		41: OrbPosition
		47: specialAbilityCooldown
		49: eyePosition
		51: ultCooldownTimer
		52: effects
		54: nanoBoost
		55: nanoBoosted
		56: duplicateRein
		57: forgotten
		58: LWdisappear
		60: ultDmg
		61: megiddo
		62: megiddoEffects
		63: miniBombs
		64: dvaPOS
		65: bombIndex
		66: bombsPOS
		69: meteorPOS
		72: ganyuBallPOS
		73: meiUlt
		74: tracerShiftPOS
		75: tracerBeams
		76: dummy
		77: bastionShift
		79: anaExtraHealth
		80: bapUlt
		81: duplicateReaper
		82: doomUlt
		83: doomDMG
		84: roadhogSize
		85: roadhogUlt
		86: symHP
		87: torbSize
		88: echoUlt
		89: echoUltTimer
		90: ballPhase
		91: ballStoreDMG
		92: ballTempHP
		93: soldierUlt
		94: soldierTargetList
		95: soldierTemp
		96: soldierLoop
		97: soldierTarget
		98: lucioHP
		99: JQHit
		100: JQHitMaxHP
		101: JQHitHP
		102: JQHitPerson
		103: JQBeingHit
		104: ventureEnemies
		105: ventureAttach
		106: ventureUlt
		107: bapHeal
		108: test
		109: mercyUlt
		110: zenUlt
		111: zenTarget
		112: zenLoop
		113: zenBeam
}

subroutines
{
	0: Comment
	1: updatePlayerStats
	2: updateBossStats
	3: updateJunkStats
	5: update2528Stats
}

disabled rule("Initial")
{
	event
	{
		Subroutine;
		Comment;
	}

	actions
	{
		Break;
	}
}

rule("Hero Assembly")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
	}
}

rule("General")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Music;
		Disable Built-In Game Mode Scoring;
	}
}

rule("Initialize Money Coordinates")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.InstantMoney = Vector(88.100, 14, -67.356);
		Global.BloodStone = Vector(0, -50, 0);
		Global.MPSLeft = Vector(75, 15, -76.500);
		Global.MPSRight = Vector(105, 17, -74);
		Global.BonusMPS = Vector(0, -50, 0);
	}
}

rule("Initialize Upgrade Shop Coordinates")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.UpgradeShopSpawn = Vector(97, 12, -33);
		Global.UpgradeShopExitGround = Vector(77.500, 12, -60);
		Global.UpgradeShopExitTop = Vector(104, 77.300, 127.500);
		Global.UpgradeSwitchShop = Vector(96.600, 96.740, 143.500);
		Global.USpeed = Vector(87, 14, -60);
		Global.UHealPerSec = Vector(74, 14, -49.500);
		Global.UHealth = Vector(73, 14, -52.392);
		Global.UObjectiveMultiplier = Vector(90, 14, -61);
		Global.UDamage = Vector(93.769, 14.273, -58.433);
		Global.UProjectileSpeed = Vector(94.672, 14.273, -55.517);
		Global.UDecreaseSpeed = Vector(93, 14, -61.500);
		Global.UCredits = Vector(128.500, 97.500, 143.500);
		Global.UHealReceived = Vector(95.668, 13.023, -50.759);
		Global.UDamageReceived = Vector(87.738, 14.023, -29.719);
	}
}

rule("Initialize Ability Shop Coordinates")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.AbilityShopSpawn = Vector(-111, 95.300, 143.500);
		Global.AbilityShopExitRight = Vector(-104.500, 77.300, 159.500);
		Global.AbilityShopExitLeft = Vector(-104, 77.300, 127.500);
		Global.AbilitySwitchShop = Vector(-96.600, 96.740, 143.500);
		Global.A1 = Vector(86.467, 14, -48.255);
		Global.A2 = Vector(87.325, 14, -45.656);
		Global.AUlt = Vector(88.018, 14, -42.840);
		Global.ALifesteal = Vector(0, -50, 0);
		Global.AInvincibility = Vector(10, -50, 0);
		Global.AFlight = Vector(0, -50, 0);
		Global.AFastUlt = Vector(0, -50, 0);
		Global.AAutoReload = Vector(0, -50, 0);
		Global.ANoCD = Vector(0, -50, 0);
		Global.AFastShop = Vector(107.722, 12, -37.071);
	}
}

rule("Initialize Summon Shop Variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.AIfrit = Vector(0, -50, 0);
		Global.AShiva = Vector(0, -50, 0);
		Global.ARamuh = Vector(0, -50, 0);
		Global.ALeviathan = Vector(0, -50, 0);
		Global.AOdin = Vector(0, -50, 0);
		Global.ABahamut = Vector(0, -50, 0);
	}
}

rule("Initialize Player Stats")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		If(Is Dummy Bot(Event Player) != True);
			Event Player.healthPercentage = 100;
			Event Player.damageReceived = 100;
			Event Player.healReceived = 100;
			Event Player.damagePercentage = 100;
			Event Player.projectileSpeed = 100;
			Event Player.moneyPerSecond = 40;
			Event Player.objectiveMultiplier = 1;
			Event Player.speed = 100;
			"0: No Shop; 1: Upgrade Shop; 2: Ability Shop"
			Event Player.shopNr = 0;
			Event Player.objectiveTimer = 5;
			Set Ability 1 Enabled(Event Player, False);
			Set Ability 2 Enabled(Event Player, False);
			Set Ultimate Ability Enabled(Event Player, False);
			Event Player.eyePosition = Vector(0, -50, 0);
		Else;
			Event Player.healthPercentage = 100;
			Event Player.damageReceived = 100;
			Event Player.healReceived = 100;
			Event Player.damagePercentage = 100;
			Event Player.projectileSpeed = 100;
			Event Player.moneyPerSecond = 40;
			Event Player.objectiveMultiplier = 1;
			Event Player.speed = 100;
	}
}

rule("Initialize Time Variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Wave = 1;
		Global.Sec = 1;
		disabled Global.Timer[0] = 999;
		disabled Global.Timer[1] = 999;
		disabled Global.Timer[2] = 999;
	}
}

rule("Initialize Summons Variables")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Ifrit[0] = Custom String("Ifrit");
		Global.Ifrit[1] = Custom String("Hellfire");
		Global.Ifrit[2] = Vector(0, -150, 0);
		Global.Ifrit[3] = 5;
		Global.Shiva[0] = Custom String("Shiva");
		Global.Shiva[1] = Custom String("Diamond Dust");
		Global.Shiva[2] = Vector(0, -150, 0);
		Global.Shiva[3] = 5;
		Global.Ramuh[0] = Custom String("Ramuh");
		Global.Ramuh[1] = Custom String("Judgment Bolt");
		Global.Ramuh[2] = Vector(80, -150, 0);
		Global.Ramuh[3] = 5;
		Global.Leviathan[0] = Custom String("Leviathan");
		Global.Leviathan[1] = Custom String("Tidal Wave");
		Global.Leviathan[2] = Vector(0, -150, 0);
		Global.Leviathan[3] = 5;
		Global.Leviathan[4] = Vector(0, -150, 0);
		Global.Leviathan[5] = Vector(0, -150, 0);
		Global.Leviathan[6] = Vector(0, -150, 0);
		Global.Leviathan[7] = Vector(75.991, 11, -64.901);
		Global.Leviathan[8] = Vector(89.081, 11, -63.705);
		Global.Leviathan[9] = Vector(105.717, 13, -73.300);
		Global.Odin[0] = Custom String("Odin");
		Global.Odin[1] = Custom String("Zentetsuken");
		Global.Odin[2] = Vector(0, -150, 0);
		Global.Odin[3] = 2;
		Global.Odin[4] = Vector(0, -150, 0);
		Global.Odin[5] = Vector(89.081, 11, -63.705);
		Global.Bahamut[0] = Custom String("Bahamut");
		Global.Bahamut[1] = Custom String("Megaflare");
		Global.Bahamut[2] = Vector(0, -150, 0);
		Global.Bahamut[3] = 5;
	}
}

rule("Hero HUD")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Left"
		Create HUD Text(All Players(All Teams), Custom String("Stats:"), Null, Null, Left, 0, Color(White), Null, Null,
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Health: {0}%\r\n	Heal/Sec: {1}\r\n		Heal Received: {2}%",
			Local Player.healthPercentage, Local Player.healPerSecond, Local Player.healReceived), Left, 1, Null, Null, Color(Turquoise),
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Damage Received: {0}", Local Player.damageReceived), Left, 1,
			Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("-------"), Custom String("Damage: {0}%\r\n	Projectile Speed: {1}%",
			Local Player.damagePercentage, Local Player.projectileSpeed), Left, 2, Null, Color(White), Color(Red), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("-------"), Custom String("Speed: {0}%", Local Player.speed), Left, 3,
			Null, Color(White), Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("-------"), Custom String(
			"Objective Multiplier: {0}\r\n	Money/Sec: {1}\r\n	Money/Kill: {2}", Local Player.objectiveMultiplier,
			Local Player.moneyPerSecond, Local Player.moneyPerKill), Left, 4, Null, Color(White), Color(Purple), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("-------"), Null, Left, 5, Null, Color(White), Null,
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Local Player.shopNr == 0 ? Custom String(
			"Hotkeys (World):\r\n	   Enter the Shop: Hold {0}", Input Binding String(Button(Interact))) : Custom String(
			"Hotkeys (Shop):\r\n	   Buy: {0}\r\n	   Buy rapidly: {1} + {0}\r\n	   Change Hero: {2}", Input Binding String(Button(
			Interact)), Input Binding String(Button(Crouch)), Custom String("{0} + {1}", Input Binding String(Button(Reload)),
			Input Binding String(Button(Melee)))), Null, Left, 6, Null, Color(Gray), Null, Visible To and String, Default Visibility);
		"Center"
		Set Objective Description(All Players(All Teams), Custom String(
			"Earn money to level up and buy abilities!\r\n	--       Created by slotter (1.6) | E9KJR       --"), Visible To and String);
		Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of(Local Player)), Custom String("{0} - Lvl. {1}", Local Player,
			Local Player.level), Custom String("${0}", Round To Integer(Local Player.money, To Nearest)), Top, 100, Color(Green), Color(
			Green), Color(Green), Visible To and String, Default Visibility);
		"Right"
		Create HUD Text(All Players(All Teams), Custom String("Abilities:"), Null, Null, Right, 100, Color(White), Null, Null,
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.ability1 == True ? Custom String("Ability 1") : Custom String(""),
			Right, 101, Null, Null, Color(Blue), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.ability2 == True ? Custom String("Ability 2") : Custom String(""),
			Right, 102, Null, Null, Color(Blue), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.noCD == True ? Custom String("No Cooldowns") : Custom String(""),
			Right, 103, Null, Null, Color(Blue), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.autoReload == True ? Custom String("Auto Reload") : Custom String(
			""), Right, 104, Null, Null, Color(Blue), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.ultAbility == True ? Custom String("Ultimate Ability")
			: Custom String(""), Right, 105, Null, Null, Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.superUlt == True ? Custom String("Super Ultimate")
			: Custom String(""), Right, 106, Null, Null, Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.lifesteal == True ? Custom String("Lifesteal") : Custom String(
			""), Right, 107, Null, Null, Color(Turquoise), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.invincibility == True ? Custom String(
			"Invincibility on Objectives") : Custom String(""), Right, 108, Null, Null, Color(Orange), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.flight == True ? Custom String("Flight") : Custom String(""),
			Right, 109, Null, Null, Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.fastShop == True ? Custom String("Faster To Shop")
			: Custom String(""), Right, 110, Null, Null, Color(Sky Blue), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Global.Wave >= 16 ? Custom String("-------") : Custom String(""), Null, Right, 111,
			Null, Color(White), Null, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Global.Wave >= 16 ? Custom String("Summons:") : Custom String(""), Null, Null, Right, 112,
			Color(White), Null, Null, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.ifrit == True ? Custom String("Ifrit:") : Custom String(""),
			Right, 113, Null, Color(Red), Color(Red), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.ifrit == True ? Custom String("Burn Bosses by time")
			: Custom String(""), Right, 114, Null, Color(Red), Color(Red), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.shiva == True ? Custom String("Shiva:") : Custom String(""),
			Right, 115, Null, Color(Sky Blue), Color(Sky Blue), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.shiva == True ? Custom String("1/10 Chance to freeze bosses")
			: Custom String(""), Right, 116, Null, Color(Sky Blue), Color(Sky Blue), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.ramuh == True ? Custom String("Ramuh:") : Custom String(""),
			Right, 117, Null, Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.ramuh == True ? Custom String("1/10 Chance to stun Bosses")
			: Custom String(""), Right, 118, Null, Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.leviathan == True ? Custom String("Leviathan:") : Custom String(
			""), Right, 119, Null, Color(Aqua), Color(Aqua), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.leviathan == True ? Custom String("Summon an identical self")
			: Custom String(""), Right, 120, Null, Color(Aqua), Color(Aqua), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.specialAbilityCooldown[0] != 0 ? Custom String(
			"Ability Cooldown: {0}", Local Player.specialAbilityCooldown[0]) : Custom String(""), Right, 121, Null, Color(Aqua), Color(
			Aqua), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.odin == True ? Custom String("Odin(Orb of the Gods):")
			: Custom String(""), Right, 122, Null, Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.odin == True ? Custom String(
			"An orb will orbit around player and damage nearest boss") : Custom String(""), Right, 123, Null, Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.bahamut == True ? Custom String("Bahamut(Gigaflare):")
			: Custom String(""), Right, 124, Null, Color(Purple), Color(Purple), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.bahamut == True ? Custom String(
			"Cast Gigaflare and deal massive damage") : Custom String(""), Right, 125, Null, Color(Purple), Color(Purple),
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Local Player.specialAbilityCooldown[1] != 0 ? Custom String(
			"Ability Cooldown: {0}", Local Player.specialAbilityCooldown[1]) : Custom String(""), Right, 126, Null, Color(Purple), Color(
			Purple), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Local Player.leviathan == True || Local Player.bahamut == True ? Custom String(
			"Hotkeys:") : Custom String(""), Null, Right, 127, Null, Color(Gray), Null, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Local Player.bahamut == True ? Custom String("Gigaflare: {0} + {1}",
			Input Binding String(Button(Interact)), Input Binding String(Button(Primary Fire))) : Custom String(""), Null, Right, 128,
			Null, Color(Gray), Null, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Local Player.leviathan == True ? Custom String("Identical Self: {0} + {1}",
			Input Binding String(Button(Interact)), Input Binding String(Button(Secondary Fire))) : Custom String(""), Null, Right, 129,
			Null, Color(Gray), Null, Visible To and String, Default Visibility);
	}
}

disabled rule("Update Stats")
{
	event
	{
		Subroutine;
		Comment;
	}

	actions
	{
		Break;
	}
}

rule("Update Player Stats (SUB)")
{
	event
	{
		Subroutine;
		updatePlayerStats;
	}

	actions
	{
		"Level"
		Event Player.level = Event Player.healPerSecond + Event Player.healthPercentage + Event Player.damagePercentage + Event Player.projectileSpeed - 300;
		Set Player Score(Event Player, Event Player.level);
		"Health"
		Set Max Health(Event Player, Event Player.healthPercentage);
		"Damage"
		Set Damage Dealt(Event Player, Event Player.damagePercentage);
		"Projectile Speed"
		Set Projectile Speed(Event Player, Event Player.projectileSpeed);
		"Heal/Sec"
		Stop All Heal Over Time(Event Player);
		Start Heal Over Time(Event Player, Null, 999999, Event Player.healPerSecond);
		"Damage Received"
		Set Damage Received(Event Player, Event Player.damageReceived);
		"Heal Received"
		Set Healing Received(Event Player, Event Player.healReceived);
		"Heal Received"
		Set Move Speed(Event Player, Event Player.speed);
	}
}

rule("Update Boss Stats (SUB)")
{
	event
	{
		Subroutine;
		updateBossStats;
	}

	actions
	{
		"Level"
		Event Player.level = Event Player.healPerSecond + Event Player.healthPercentage + Event Player.damagePercentage + Event Player.projectileSpeed - 0;
		Set Player Score(Event Player, Event Player.level);
		"Health"
		Set Max Health(Event Player, Event Player.healthPercentage);
		"Damage"
		Set Damage Dealt(Event Player, Event Player.damagePercentage);
		"Projectile Speed"
		Set Projectile Speed(Event Player, Event Player.projectileSpeed);
		"Heal/Sec"
		Stop All Heal Over Time(Event Player);
		Start Heal Over Time(Event Player, Null, 999999, Event Player.healPerSecond);
		"Speed"
		Set Move Speed(Event Player, Event Player.speed);
		"Damage Received"
		Set Damage Received(Event Player, Event Player.damageReceived);
	}
}

rule("Update Junk Boss Stats(SUB)")
{
	event
	{
		Subroutine;
		updateJunkStats;
	}

	actions
	{
		"Level"
		Event Player.level = Event Player.healPerSecond + Event Player.healthPercentage + Event Player.damagePercentage + Event Player.projectileSpeed - 0;
		Set Player Score(Event Player, Event Player.level * 2);
		"Health"
		Set Max Health(Event Player, Event Player.healthPercentage);
		"Damage"
		Set Damage Dealt(Event Player, Event Player.damagePercentage);
		"Projectile Speed"
		Set Projectile Speed(Event Player, Event Player.projectileSpeed);
		"Heal/Sec"
		Stop All Heal Over Time(Event Player);
		Start Heal Over Time(Event Player, Null, 999999, Event Player.healPerSecond);
		"Speed"
		Set Move Speed(Event Player, Event Player.speed);
	}
}

rule("Update Wave 25-28 Boss Stats(SUB)")
{
	event
	{
		Subroutine;
		update2528Stats;
	}

	actions
	{
		"Level"
		Event Player.level = (
			Event Player.healPerSecond + Event Player.healthPercentage + Event Player.damagePercentage + Event Player.projectileSpeed)
			* 10;
		Set Player Score(Event Player, Event Player.level);
		"Health"
		Set Max Health(Event Player, Event Player.healthPercentage);
		"Damage"
		Set Damage Dealt(Event Player, Event Player.damagePercentage);
		"Projectile Speed"
		Set Projectile Speed(Event Player, Event Player.projectileSpeed);
		"Heal/Sec"
		Stop All Heal Over Time(Event Player);
		Start Heal Over Time(Event Player, Null, 999999, Event Player.healPerSecond);
		"Speed"
		Set Move Speed(Event Player, Event Player.speed);
		Set Damage Received(Event Player, 10);
		"Damage Received"
		Set Damage Received(Event Player, Event Player.damageReceived);
	}
}

rule("Update Player Money (Time)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Assembling Heroes == False;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Event Player.money += Event Player.moneyPerSecond;
		Loop If Condition Is True;
	}
}

disabled rule("World")
{
	event
	{
		Subroutine;
		Comment;
	}

	actions
	{
		Break;
	}
}

rule("Effects + Texts(Normal Wave)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Money/Sec - Top/Bottom"
		Create Effect(Local Player.shopNr == 0 ? Local Player : Null, Ring, Color(Green), Global.MPSLeft, 2,
			Visible To Position and Radius);
		Create Icon(Local Player.shopNr == 0 ? Local Player : Null, Global.MPSLeft, Bolt, Visible To and Position, Color(Green), False);
		Create In-World Text(Distance Between(Global.MPSLeft, Position Of(Local Player))
			<= 60 && Local Player.shopNr == 0 ? Local Player : Null, Custom String("Upgrade Money/Sec"), Vector(X Component Of(
			Global.MPSLeft), Y Component Of(Global.MPSLeft) + 2, Z Component Of(Global.MPSLeft)), 2.500, Clip Against Surfaces,
			Visible To Position and String, Color(Green), Default Visibility);
		Create Effect(Local Player.shopNr == 0 ? Local Player : Null, Ring, Color(Green), Global.MPSRight, 2,
			Visible To Position and Radius);
		Create Icon(Local Player.shopNr == 0 ? Local Player : Null, Global.MPSRight, Bolt, Visible To and Position, Color(Green), False);
		Create In-World Text(Distance Between(Global.MPSRight, Position Of(Local Player))
			<= 60 && Local Player.shopNr == 0 ? Local Player : Null, Custom String("Upgrade Money/Sec"), Vector(X Component Of(
			Global.MPSRight), Y Component Of(Global.MPSRight) + 2, Z Component Of(Global.MPSRight)), 2.500, Clip Against Surfaces,
			Visible To Position and String, Color(Green), Default Visibility);
		"Money - Center"
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.InstantMoney, 4.100, Visible To Position and Radius);
		Create Icon(Local Player.shopNr == 0 ? Local Player : Null, Global.InstantMoney, Diamond, Visible To and Position, Color(Blue),
			False);
		Create In-World Text(Players Within Radius(Global.InstantMoney, 35, All Teams, Off), Custom String("Earn Money"), Vector(
			X Component Of(Global.InstantMoney), Y Component Of(Global.InstantMoney) + 4, Z Component Of(Global.InstantMoney)), 4,
			Do Not Clip, Visible To Position and String, Color(Blue), Default Visibility);
		"Blood - Top"
		Create Effect(All Players(All Teams), Ring, Color(Red), Global.BloodStone, 2.500, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Orb, Custom Color(158, 0, 0, 0), Vector(X Component Of(Global.BloodStone), Y Component Of(
			Global.BloodStone) + 4, Z Component Of(Global.BloodStone)), 2.500, Visible To Position and Radius);
		Create Icon(Local Player.shopNr == 0 ? Local Player : Null, Global.BloodStone, Exclamation Mark, Visible To and Position, Color(
			Red), False);
		Create In-World Text(Players Within Radius(Global.BloodStone, 50, All Teams, Off), Custom String("Blood Crystal"), Vector(
			X Component Of(Global.BloodStone), Y Component Of(Global.BloodStone) + 4, Z Component Of(Global.BloodStone)), 2.500,
			Clip Against Surfaces, Visible To Position and String, Color(Red), Default Visibility);
		"Bonus Money/Sec"
		Create Effect(All Players(All Teams), Ring, Color(Green), Global.BonusMPS, 2.500, Visible To Position and Radius);
		Create Effect(Players Within Radius(Global.BonusMPS, 2.500, All Teams, Off), Mercy Boost Beam Sound, Color(Green), Global.BonusMPS,
			25, Visible To Position and Radius);
		Create Icon(Local Player.shopNr == 0 ? Local Player : Null, Global.BonusMPS, Exclamation Mark, Visible To and Position, Color(
			Green), False);
		Create In-World Text(Players Within Radius(Global.BonusMPS, 7.600, All Teams, Off), Custom String("More Money/Sec"),
			Global.BonusMPS, 2, Clip Against Surfaces, Visible To Position and String, Color(Green), Default Visibility);
	}
}

rule("Effects + Text(Bonus Wave)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave >= 13;
	}

	actions
	{
		Global.BloodStone = Vector(78.617, 13.500, -97.952);
		Global.BonusMPS = Vector(82.489, 14, -88.565);
	}
}

rule("Money/Sec (Top)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.MPSLeft, Position Of(Event Player)) <= 2;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(5, Abort When False);
		Event Player.moneyPerSecond += Global.Wave * 12 * Event Player.objectiveMultiplier;
		Small Message(Event Player, Custom String("+${0} Money/Sec", 12 / 1 * Global.Wave * Event Player.objectiveMultiplier));
		Loop If Condition Is True;
	}
}

rule("Money/Sec (Bottom)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.MPSRight, Position Of(Event Player)) <= 2;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(5, Abort When False);
		Event Player.moneyPerSecond += Global.Wave * 12 * Event Player.objectiveMultiplier;
		Small Message(Event Player, Custom String("+${0} Money/Sec", 12 / 1 * Global.Wave * Event Player.objectiveMultiplier));
		Loop If Condition Is True;
	}
}

rule("Money/Sec (Bonus)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.BonusMPS, Position Of(Event Player)) <= 2.500;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Global.Wave >= 13;
	}

	actions
	{
		Wait(5, Abort When False);
		Event Player.moneyPerSecond += Global.Wave / 2 * 50 * Event Player.objectiveMultiplier;
		Small Message(Event Player, Custom String("+${0} Money/Sec", 50 / 2 * Global.Wave * Event Player.objectiveMultiplier));
		Loop If Condition Is True;
	}
}

rule("Instant Money")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.InstantMoney, Position Of(Event Player)) <= 4;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Skip If(Event Player.objectiveTimer != 5, 1);
		Set Status(Event Player.invincibility == True ? Event Player : Null, Null, Invincible, 9999);
		Wait Until(Distance Between(Global.InstantMoney, Position Of(Event Player)) > 4, 5);
		If(Event Player.objectiveTimer == 5);
			Event Player.objectiveTimer -= 5;
		End;
		Skip If(Distance Between(Global.InstantMoney, Position Of(Event Player)) > 4, 5);
		Event Player.money += Event Player.objectiveMultiplier * 750;
		Play Effect(Event Player, Ring Explosion, Color(Blue), Vector(X Component Of(Global.InstantMoney), Y Component Of(
			Global.InstantMoney) - 1.250, Z Component Of(Global.InstantMoney)), 19);
		Play Effect(Event Player, Ring Explosion Sound, Null, Event Player, 45);
		Small Message(Event Player, Custom String("+${0}", Event Player.objectiveMultiplier * 750));
		Loop If Condition Is True;
		Event Player.objectiveTimer = 5;
		Clear Status(Event Player, Invincible);
	}
}

rule("Blood Stone")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.BloodStone, Position Of(Event Player)) <= 2.500;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Global.Wave >= 13;
	}

	actions
	{
		If(Event Player.objectiveTimer == 5);
			Small Message(Event Player, Custom String("Entered The Blood Crystal!"));
			Event Player.objectiveTimer = 4;
		End;
		Wait Until(Distance Between(Global.BloodStone, Position Of(Event Player)) > 5, 1.750);
		Skip If(Distance Between(Global.BloodStone, Position Of(Event Player)) > 5, 7);
		Create Beam Effect(All Players(All Teams), Bad Beam, Vector(X Component Of(Global.BloodStone), Y Component Of(Global.BloodStone)
			+ 4, Z Component Of(Global.BloodStone)), Event Player, Color(Red), Visible To Position and Radius);
		Damage(Event Player, Null, Max Health(Event Player) / 10);
		Small Message(Event Player, Custom String("+${0}", Event Player.objectiveMultiplier * Round To Integer(Max Health(Event Player)
			/ 10, To Nearest) * 30));
		Event Player.money += Event Player.objectiveMultiplier * Round To Integer(Max Health(Event Player) / 10, To Nearest) * 30;
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Loop If Condition Is True;
		Event Player.objectiveTimer = 5;
	}
}

disabled rule("Shop (General)")
{
	event
	{
		Subroutine;
		Comment;
	}

	actions
	{
		Break;
	}
}

rule("Enter Upgrade Shop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Using Ultimate(Event Player) == False;
		Is On Ground(Event Player) == True;
		Is Moving(Event Player) == False;
		Event Player.shopNr == 0;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.fastShop == False;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Small Message(Event Player, Custom String("Entering Shop... (3)"));
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("Entering Shop... (2)"));
		Wait(1, Abort When False);
		Small Message(Event Player, Custom String("Entering Shop... (1)"));
		Wait(1, Abort When False);
		Set Status(Event Player, Null, Stunned, 0.500);
		Set Status(Event Player, Null, Invincible, 999999);
		Set Status(Event Player, Null, Phased Out, 999999);
		Clear Status(Event Player, Burning);
		Set Player Health(Event Player, Max Health(Event Player));
		If(Hero Of(Event Player) == Hero(Sombra));
			Disallow Button(Event Player, Button(Ability 2));
			Disallow Button(Event Player, Button(Interact));
		Else If(Hero Of(Event Player) == Hero(Tracer));
			Disallow Button(Event Player, Button(Ability 2));
		Else If(Hero Of(Event Player) == Hero(Kiriko));
			Disallow Button(Event Player, Button(Ability 1));
		End;
		Event Player.shopNr = 1;
		Teleport(Event Player, Global.UpgradeShopSpawn);
		Set Facing(Event Player, Vector(0, 0, -10), To World);
		Small Message(Event Player, Custom String("Entered The Upgrade-Shop"));
	}
}

rule("Disable Ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.shopNr != 0;
		(Hero Of(Event Player) == Hero(Sombra) || Hero Of(Event Player) == Hero(Tracer)) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Interact));
		Wait Until(Hero Of(Event Player) != Hero(Sombra) && Hero Of(Event Player) != Hero(Tracer), 999999);
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Interact));
	}
}

disabled rule("Change Hero (in Shop)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Event Player.shopNr != 0;
		Event Player.money >= 50000;
	}

	actions
	{
		Stop All Heal Over Time(Event Player);
		Event Player.tempPosition = Position Of(Event Player);
		Event Player.tempFacing = Facing Direction Of(Event Player);
		Event Player.ultPercentage = Ultimate Charge Percent(Event Player);
		Set Player Allowed Heroes(Event Player, Filtered Array(All Heroes, Current Array Element != Hero Of(Event Player)));
		Reset Player Hero Availability(Event Player);
		disabled Set Player Allowed Heroes(Event Player, Remove From Array(All Heroes, Hero Of(Event Player)));
		disabled Wait(False, Ignore Condition);
		disabled Set Player Allowed Heroes(Event Player, All Heroes);
		Wait Until(Has Spawned(Event Player), 999999);
		Teleport(Event Player, Vector(X Component Of(Event Player.tempPosition), Y Component Of(Event Player.tempPosition), Z Component Of(
			Event Player.tempPosition)));
		Set Facing(Event Player, Event Player.tempFacing, To World);
		Start Heal Over Time(Event Player, Null, 999999, Event Player.healPerSecond);
		Skip If(Hero Of(Event Player) != Hero(D.Va), 1);
		Wait(0.300, Ignore Condition);
		Set Ultimate Charge(Event Player, Event Player.ultPercentage);
		Event Player.money -= 50000;
	}
}

rule("Shop Exit(Ground)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		(Distance Between(Position Of(Event Player), Global.UpgradeShopExitGround) <= 2 || Distance Between(Position Of(Event Player),
			Global.UpgradeShopExitTop) <= 17.400 || Distance Between(Position Of(Event Player), Global.AbilityShopExitLeft)
			<= 17.400 || Distance Between(Position Of(Event Player), Global.AbilityShopExitRight) <= 17.400) == True;
		Has Spawned(Event Player) == True;
		Event Player.shopNr != 0;
	}

	actions
	{
		Teleport(Event Player, Vector(76.500, 12, -65));
		Respawn(Event Player);
		Wait Until(Has Spawned(Event Player), True);
		Event Player.shopNr = 0;
		Wait(0.300, Ignore Condition);
		Clear Status(Event Player, Phased Out);
		Clear Status(Event Player, Invincible);
		Allow Button(Hero Of(Event Player) == Hero(Sombra) ? Event Player : Null, Button(Ability 2));
		Allow Button(Event Player, Button(Interact));
		Wait(3.500, Ignore Condition);
		Allow Button(Hero Of(Event Player) == Hero(Tracer) ? Event Player : Null, Button(Ability 2));
	}
}

disabled rule("Upgrade-Shop")
{
	event
	{
		Subroutine;
		Comment;
	}

	actions
	{
		Break;
	}
}

rule("Effects + Texts")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Shop Exits"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Light Shaft, Color(White), Global.UpgradeShopExitGround, 2,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Exit Shop"), Vector(X Component Of(
			Global.UpgradeShopExitGround) + 1.500, Y Component Of(Global.UpgradeShopExitGround) + 2, Z Component Of(
			Global.UpgradeShopExitGround) + 5), 2, Clip Against Surfaces, Visible To Position and String, Color(White),
			Default Visibility);
		disabled Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Light Shaft, Color(White), Global.UpgradeShopExitTop, 4,
			Visible To Position and Radius);
		disabled Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Exit Shop"), Vector(X Component Of(
			Global.UpgradeShopExitTop), Y Component Of(Global.UpgradeShopExitTop) + 18.500, Z Component Of(Global.UpgradeShopExitTop)), 2,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		"Speed"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Orange), Global.USpeed, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Upgrade Speed {0}", Ability Icon String(Hero(
			Soldier: 76), Button(Ability 1))), Global.USpeed, 1.500, Clip Against Surfaces, Visible To Position and String, Color(Orange),
			Default Visibility);
		"Heal/Sec"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Turquoise), Global.UHealPerSec, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Upgrade Heal/Sec {0}", Ability Icon String(
			Hero(Baptiste), Button(Ability 1))), Global.UHealPerSec, 1.500, Clip Against Surfaces, Visible To Position and String, Color(
			Turquoise), Default Visibility);
		"Health"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Turquoise), Global.UHealth, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Upgrade Health {0}", Icon String(Plus)),
			Global.UHealth, 1.500, Clip Against Surfaces, Visible To Position and String, Color(Turquoise), Default Visibility);
		"Objective Multiplier"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Purple), Global.UObjectiveMultiplier, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Upgrade Objective Multiplier {0}", Icon String(
			Dizzy)), Global.UObjectiveMultiplier, 1.500, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		"Damage"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Red), Global.UDamage, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Upgrade Damage {0}", Icon String(Arrow: Up)),
			Global.UDamage, 1.500, Clip Against Surfaces, Visible To Position and String, Color(Red), Default Visibility);
		"Projectile Speed"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Red), Global.UProjectileSpeed, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Upgrade Projectile Speed {0}",
			Ability Icon String(Hero(D.Va), Button(Ability 2))), Global.UProjectileSpeed, 1.500, Clip Against Surfaces,
			Visible To Position and String, Color(Red), Default Visibility);
		"Downgrade Speed"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Orange), Global.UDecreaseSpeed, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Downgrade Speed {0}", Ability Icon String(Hero(
			Tracer), Button(Ability 2))), Global.UDecreaseSpeed, 1.500, Clip Against Surfaces, Visible To Position and String, Color(
			Orange), Default Visibility);
		"Heal Received"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Turquoise), Global.UHealReceived, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Upgrade Heal Received {0}",
			Ability Icon String(Hero(Zenyatta), Button(Ability 1))), Global.UHealReceived, 1.500, Clip Against Surfaces,
			Visible To Position and String, Color(Turquoise), Default Visibility);
		"Damage Reduction"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Red), Global.UDamageReceived, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Upgrade Reduce Damage Received{0}",
			Ability Icon String(Hero(Reinhardt), Button(Secondary Fire))), Global.UDamageReceived, 1.500, Clip Against Surfaces,
			Visible To Position and String, Color(Red), Default Visibility);
	}
}

rule("Upgrade Speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.USpeed, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.money >= Round To Integer((Event Player.speed - 99) * 50, To Nearest);
		Event Player.speed >= Event Player.speedMax;
		Event Player.speed < 500;
	}

	actions
	{
		Event Player.speed += 1;
		Event Player.money -= Round To Integer((Event Player.speed - 100) * 50, To Nearest);
		If(Event Player.speed > Event Player.speedMax);
			Event Player.speedMax = Event Player.speed;
		End;
		Call Subroutine(updatePlayerStats);
	}
}

rule("Fast Upgrade Speed (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.USpeed, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.money >= Round To Integer((Event Player.speed - 99) * 50, To Nearest);
		Event Player.speed >= Event Player.speedMax;
		Event Player.speed < 500;
	}

	actions
	{
		Event Player.speed += 1;
		Event Player.money -= Round To Integer((Event Player.speed - 100) * 50, To Nearest);
		If(Event Player.speed > Event Player.speedMax);
			Event Player.speedMax = Event Player.speed;
		End;
		Wait(0.025, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(updatePlayerStats);
	}
}

rule("Reupgrade Speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.USpeed, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.speed < Event Player.speedMax;
	}

	actions
	{
		Event Player.speed += 1;
		Call Subroutine(updatePlayerStats);
	}
}

rule("Fast Reupgrade Speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.USpeed, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.speed < Event Player.speedMax;
	}

	actions
	{
		Event Player.speed += 1;
		Wait(0.025, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(updatePlayerStats);
	}
}

rule("Downgrade Speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UDecreaseSpeed, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.speed > 100;
	}

	actions
	{
		Event Player.speed -= 1;
		Call Subroutine(updatePlayerStats);
	}
}

rule("Fast Downgrade Speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UDecreaseSpeed, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.speed > 100;
	}

	actions
	{
		Event Player.speed -= 1;
		Wait(0.025, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(updatePlayerStats);
	}
}

rule("Upgrade Heal/Sec (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UHealPerSec, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.money >= Round To Integer((Event Player.healPerSecond + 1) * 50, To Nearest);
		Event Player.healPerSecond < 10000;
	}

	actions
	{
		Event Player.healPerSecond += 1;
		Event Player.money -= Round To Integer(Event Player.healPerSecond * 50, To Nearest);
		Call Subroutine(updatePlayerStats);
	}
}

rule("Fast Upgrade Heal/Sec (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UHealPerSec, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.money >= Round To Integer((Event Player.healPerSecond + 1) * 50, To Nearest);
		Event Player.healPerSecond < 10000;
		Event Player.healPerSecond + 9 < 10000;
	}

	actions
	{
		Event Player.healPerSecond += 10;
		Event Player.money -= Round To Integer((Event Player.healPerSecond - 0) * 500 - 2250, To Nearest);
		Wait(0.008, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(updatePlayerStats);
	}
}

rule("Upgrade Health (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UHealth, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.money >= Round To Integer((Event Player.healthPercentage - 99) * 50, To Nearest);
		Event Player.healthPercentage < 10000;
	}

	actions
	{
		Event Player.healthPercentage += 1;
		Event Player.money -= Round To Integer((Event Player.healthPercentage - 100) * 50, To Nearest);
		Call Subroutine(updatePlayerStats);
	}
}

rule("Fast Upgrade Health (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UHealth, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.money >= Round To Integer((Event Player.healthPercentage - 99) * 500, To Nearest);
		Event Player.healthPercentage + 9 < 10000;
	}

	actions
	{
		Event Player.healthPercentage += 10;
		Event Player.money -= Round To Integer((Event Player.healthPercentage - 99) * 500 - 2250, To Nearest);
		Wait(0.008, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(updatePlayerStats);
	}
}

rule("Upgrade Heal Received (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UHealReceived, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.money >= Round To Integer((Event Player.healReceived - 99) * 50, To Nearest);
		Event Player.healReceived < 10000;
	}

	actions
	{
		Event Player.healReceived += 1;
		Event Player.money -= Round To Integer((Event Player.healReceived - 100) * 50 * Number Of Players(Team 1), To Nearest);
		Call Subroutine(updatePlayerStats);
		All Players(Team 1).healReceived += 1;
	}
}

rule("Fast Upgrade Heal Received (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UHealReceived, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.money >= Round To Integer((Event Player.healReceived - 99) * 500, To Nearest);
		Event Player.healReceived + 9 < 10000;
	}

	actions
	{
		All Players(Team 1).healReceived += 10;
		Event Player.money -= Round To Integer((Event Player.healReceived - 99) * 500 * Number Of Players(Team 1) - 2250, To Nearest);
		Wait(0.008, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(updatePlayerStats);
	}
}

rule("Upgrade Damage Received")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UDamageReceived, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= Round To Integer((100 - Event Player.damageReceived) * 1000000, To Nearest);
		Event Player.damageReceived > 1;
	}

	actions
	{
		Event Player.damageReceived -= 5;
		Event Player.money -= Round To Integer((100 - Event Player.damageReceived) * 1000000, To Nearest);
		If(Event Player.damageReceived == 0);
			Event Player.damageReceived += 1;
		End;
		Call Subroutine(updatePlayerStats);
	}
}

rule("Upgrade Objective Multiplier (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UObjectiveMultiplier, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.money >= Round To Integer((Event Player.objectiveMultiplier + 1) * 500, To Nearest);
		Event Player.objectiveMultiplier < 1000;
	}

	actions
	{
		Event Player.objectiveMultiplier += 1;
		Event Player.money -= Round To Integer(Event Player.objectiveMultiplier * 500, To Nearest);
	}
}

rule("Fast Upgrade Objective Multiplier (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UObjectiveMultiplier, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.money >= Round To Integer((Event Player.objectiveMultiplier + 1) * 5000, To Nearest);
		Event Player.objectiveMultiplier + 9 < 1000;
	}

	actions
	{
		Event Player.objectiveMultiplier += 10;
		Event Player.money -= Round To Integer((Event Player.objectiveMultiplier - 0) * 5000 - 0, To Nearest);
		Event Player.money -= Round To Integer(Event Player.objectiveMultiplier * 500, To Nearest);
		Wait(0.008, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Upgrade Damage (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UDamage, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.money >= Round To Integer((Event Player.damagePercentage - 99) * 50, To Nearest);
		Event Player.damagePercentage < 10000;
	}

	actions
	{
		Event Player.damagePercentage += 1;
		Event Player.money -= Round To Integer((Event Player.damagePercentage - 100) * 50, To Nearest);
		Call Subroutine(updatePlayerStats);
	}
}

rule("Fast Upgrade Damage (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UDamage, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.money >= Round To Integer((Event Player.damagePercentage - 99) * 500, To Nearest);
		Event Player.damagePercentage + 9 < 10000;
	}

	actions
	{
		Event Player.damagePercentage += 10;
		Event Player.money -= Round To Integer((Event Player.damagePercentage - 100) * 500 - 2250, To Nearest);
		Wait(0.008, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(updatePlayerStats);
	}
}

rule("Upgrade Projectile Speed (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UProjectileSpeed, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.money >= Round To Integer((Event Player.projectileSpeed - 99) * 50, To Nearest);
		Event Player.projectileSpeed < 10000;
	}

	actions
	{
		Event Player.projectileSpeed += 1;
		Event Player.money -= Round To Integer((Event Player.projectileSpeed - 100) * 50, To Nearest);
		Call Subroutine(updatePlayerStats);
	}
}

rule("Fast Upgrade Projectile Speed (1/50)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.UProjectileSpeed, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.money >= Round To Integer((Event Player.projectileSpeed - 99) * 500, To Nearest);
		Event Player.projectileSpeed + 9 < 10000;
	}

	actions
	{
		Event Player.projectileSpeed += 10;
		Event Player.money -= Round To Integer((Event Player.projectileSpeed - 100) * 500 - 2250, To Nearest);
		Wait(0.008, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(updatePlayerStats);
	}
}

disabled rule("Ability-Shop")
{
	event
	{
		Subroutine;
		Comment;
	}

	actions
	{
		Break;
	}
}

rule("Effects + Texts")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Ability 1"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Blue), Global.A1, 1.500, Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Ability {0}: $2500 {1}", Ability Icon String(
			Hero Of(Local Player), Button(Ability 1)), Local Player.ability1 == True ? Custom String("(Bought {0})", Icon String(
			Checkmark)) : Custom String("")), Global.A1, 1.500, Clip Against Surfaces, Visible To Position and String, Color(Blue),
			Default Visibility);
		"Ability 2"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Blue), Global.A2, 1.500, Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Ability {0}: $2500 {1}", Ability Icon String(
			Hero Of(Local Player), Button(Ability 2)), Local Player.ability2 == True ? Custom String("(Bought {0})", Icon String(
			Checkmark)) : Custom String("")), Global.A2, 1.500, Clip Against Surfaces, Visible To Position and String, Color(Blue),
			Default Visibility);
		"Ultimate Ability"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(White), Global.AUlt, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Ultimate Ability {0}: $10,000 {1}",
			Ability Icon String(Hero Of(Local Player), Button(Ultimate)), Local Player.ultAbility == True ? Custom String("(Bought {0})",
			Icon String(Checkmark)) : Custom String("")), Global.AUlt, 1.500, Clip Against Surfaces, Visible To Position and String, Color(
			White), Default Visibility);
		"Faster To Shop"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Sky Blue), Global.AFastShop, 1,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Faster To Shop: $250,000 {1}", Null,
			Local Player.fastShop == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")), Global.AFastShop,
			1.500, Clip Against Surfaces, Visible To Position and String, Color(Sky Blue), Default Visibility);
		"No Cooldowns"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Blue), Global.ANoCD, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("No Cooldowns: $25,000,000 {1}", Null,
			Local Player.noCD == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")), Global.ANoCD, 1.500,
			Clip Against Surfaces, Visible To Position and String, Color(Blue), Default Visibility);
		"Super Ultimate"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(White), Global.AFastUlt, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Super Ultimate: $50,000,000 {1}", Null,
			Local Player.superUlt == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")), Global.AFastUlt,
			1.500, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(Players Within Radius(Global.AFastUlt, 6, All Teams, Off), Custom String("Super Ultimate"), Vector(
			X Component Of(Global.AFastUlt), Y Component Of(Global.AFastUlt) - 0.100, Z Component Of(Global.AFastUlt)), 1,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		"Auto Reload"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Blue), Global.AAutoReload, 1.500,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Auto Reload: $10,000,000 {1}", Null,
			Local Player.autoReload == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")),
			Global.AAutoReload, 1.500, Clip Against Surfaces, Visible To Position and String, Color(Blue), Default Visibility);
		"Flying"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Orange), Global.AFlight, 1,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Flight: $100,000,000 {1}", Null,
			Local Player.flight == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")), Global.AFlight,
			1.500, Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
		"Lifesteal"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Turquoise), Global.ALifesteal, 1,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Lifesteal: $25,000,000 {1}", Null,
			Local Player.lifesteal == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")), Global.ALifesteal,
			1.500, Clip Against Surfaces, Visible To Position and String, Color(Turquoise), Default Visibility);
		Create In-World Text(Players Within Radius(Global.ALifesteal, 6, All Teams, Off), Custom String("Heal 35% of damage done"), Vector(
			X Component Of(Global.ALifesteal), Y Component Of(Global.ALifesteal) - 0.100, Z Component Of(Global.ALifesteal)), 1,
			Clip Against Surfaces, Visible To Position and String, Color(Turquoise), Default Visibility);
		"Invincibility"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Orange), Global.AInvincibility, 1,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Invincibility on Objectives: $15,000,000 {1}",
			Null, Local Player.invincibility == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")),
			Global.AInvincibility, 1.500, Clip Against Surfaces, Visible To Position and String, Color(Orange), Default Visibility);
		Create In-World Text(Players Within Radius(Global.AInvincibility, 6, All Teams, Off), Custom String("Excludes {0}- Objectives",
			Icon String(Exclamation Mark)), Vector(X Component Of(Global.AInvincibility), Y Component Of(Global.AInvincibility) - 0.100,
			Z Component Of(Global.AInvincibility)), 1, Clip Against Surfaces, Visible To Position and String, Color(Orange),
			Default Visibility);
	}
}

rule("Effects + Texts(Wave 13)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave >= 13;
	}

	actions
	{
		Global.AFastUlt = Vector(88.716, 14, -40.052);
		Global.AAutoReload = Vector(89.503, 14, -37.354);
		Global.ANoCD = Vector(90.194, 14, -34.581);
	}
}

rule("Effects + Texts(Wave 17)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave >= 21;
	}

	actions
	{
		Global.ALifesteal = Vector(107.185, 12.023, -39.311);
		Global.AInvincibility = Vector(106.665, 12.023, -41.279);
		Global.AFlight = Vector(106.055, 12.023, -43.558);
	}
}

rule("Buy Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.A1, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 2500;
		Event Player.ability1 == False;
	}

	actions
	{
		Event Player.ability1 = True;
		Event Player.money -= 2500;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Buy Ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.A2, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 2500;
		Event Player.ability2 == False;
	}

	actions
	{
		Event Player.ability2 = True;
		Event Player.money -= 2500;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Buy Ultimate Ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.AUlt, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 10000;
		Event Player.ultAbility == False;
	}

	actions
	{
		Event Player.ultAbility = True;
		Event Player.money -= 10000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Buy Lifesteal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.ALifesteal, Position Of(Event Player)) <= 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 25000000;
		Event Player.lifesteal == False;
		Global.Wave >= 21;
	}

	actions
	{
		Event Player.lifesteal = True;
		Event Player.money -= 25000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Buy Invincibility")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.AInvincibility, Position Of(Event Player)) <= 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 15000000;
		Event Player.invincibility == False;
		Global.Wave >= 21;
	}

	actions
	{
		Event Player.invincibility = True;
		Event Player.money -= 15000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Buy Flight")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.AFlight, Position Of(Event Player)) <= 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 100000000;
		Event Player.flight == False;
		Global.Wave >= 21;
	}

	actions
	{
		Event Player.flight = True;
		Event Player.money -= 100000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Buy Super Ultimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.AFastUlt, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 50000000;
		disabled Event Player.level > 9999;
		Event Player.superUlt == False;
		Global.Wave >= 13;
	}

	actions
	{
		Event Player.superUlt = True;
		Event Player.money -= 50000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Buy Faster to Shop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.AFastShop, Position Of(Event Player)) <= 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 250000;
		Event Player.fastShop == False;
	}

	actions
	{
		Event Player.fastShop = True;
		Event Player.money -= 250000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Buy Auto Reload")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.AAutoReload, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 10000000;
		Event Player.autoReload == False;
		Global.Wave >= 13;
	}

	actions
	{
		Event Player.autoReload = True;
		Event Player.money -= 10000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Buy No Cooldowns")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.ANoCD, Position Of(Event Player)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 25000000;
		Event Player.noCD == False;
		Global.Wave >= 13;
	}

	actions
	{
		Event Player.noCD = True;
		Event Player.money -= 25000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

disabled rule("Summon Abilities Shop")
{
	event
	{
		Subroutine;
		Comment;
	}
}

rule("Effects + Texts")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Ifrit"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Red), Global.AIfrit, 1, Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Ifrit: $50,000,000 {1}", Null,
			Local Player.ifrit == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")), Global.AIfrit, 1.500,
			Clip Against Surfaces, Visible To Position and String, Color(Red), Default Visibility);
		"Shiva"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Sky Blue), Global.AShiva, 1,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Shiva: $50,000,000 {1}", Null,
			Local Player.shiva == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")), Global.AShiva, 1.500,
			Clip Against Surfaces, Visible To Position and String, Color(Sky Blue), Default Visibility);
		"Ramuh"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Yellow), Global.ARamuh, 1,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Ramuh: $50,000,000 {1}", Null,
			Local Player.ramuh == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")), Global.ARamuh, 1.500,
			Clip Against Surfaces, Visible To Position and String, Color(Yellow), Default Visibility);
		"Leviathan"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Aqua), Global.ALeviathan, 1,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Leviathan: $100,000,000 {1}", Null,
			Local Player.leviathan == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")), Global.ALeviathan,
			1.500, Clip Against Surfaces, Visible To Position and String, Color(Aqua), Default Visibility);
		"Odin"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(White), Global.AOdin, 1, Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Odin: $100,000,000 {1}", Null,
			Local Player.odin == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")), Global.AOdin, 1.500,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		"Bahamut"
		Create Effect(Local Player.shopNr == 1 ? Local Player : Null, Ring, Color(Purple), Global.ABahamut, 1,
			Visible To Position and Radius);
		Create In-World Text(Local Player.shopNr == 1 ? Local Player : Null, Custom String("Bahamut: $100,000,000 {1}", Null,
			Local Player.bahamut == True ? Custom String("(Bought {0})", Icon String(Checkmark)) : Custom String("")), Global.ABahamut,
			1.500, Clip Against Surfaces, Visible To Position and String, Color(Purple), Default Visibility);
	}
}

rule("Ifrit Effects + Text")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.SummonReward[0] == True;
	}

	actions
	{
		Global.AIfrit = Vector(83.709, 17.023, -30.903);
	}
}

rule("Buy Ifrit")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.AIfrit, Position Of(Event Player)) <= 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 50000000;
		Event Player.ifrit == False;
		Global.SummonReward[0] == True;
	}

	actions
	{
		Event Player.ifrit = True;
		Event Player.money -= 50000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Shiva Effects + Text")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.SummonReward[1] == True;
	}

	actions
	{
		Global.AShiva = Vector(83.425, 17.023, -33.229);
	}
}

rule("Buy Shiva")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.AShiva, Position Of(Event Player)) <= 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 50000000;
		Event Player.shiva == False;
		Global.SummonReward[1] == True;
	}

	actions
	{
		Event Player.shiva = True;
		Event Player.money -= 50000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Ramuh Effects + Text")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.SummonReward[2] == True;
	}

	actions
	{
		Global.ARamuh = Vector(82.915, 17.023, -35.437);
	}
}

rule("Buy Ramuh")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.ARamuh, Position Of(Event Player)) <= 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 50000000;
		Event Player.ramuh == False;
		Global.SummonReward[2] == True;
	}

	actions
	{
		Event Player.ramuh = True;
		Event Player.money -= 50000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Leviathan Effects + Text")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.SummonReward[3] == True;
	}

	actions
	{
		Global.ALeviathan = Vector(82.416, 17.023, -37.469);
	}
}

rule("Buy Leviathan")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.ALeviathan, Position Of(Event Player)) <= 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 100000000;
		Event Player.leviathan == False;
		Global.SummonReward[3] == True;
	}

	actions
	{
		Event Player.leviathan = True;
		Event Player.money -= 100000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Odin Effects + Text")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.SummonReward[4] == True;
	}

	actions
	{
		Global.AOdin = Vector(81.964, 17.023, -39.261);
	}
}

rule("Buy Odin")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.AOdin, Position Of(Event Player)) <= 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 100000000;
		disabled Event Player.odin == False;
		disabled Global.SummonReward[4] == True;
	}

	actions
	{
		Event Player.odin = True;
		Event Player.money -= 100000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

rule("Bahamut Effects + Text")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.SummonReward[5] == True;
	}

	actions
	{
		Global.ABahamut = Vector(81.504, 17.023, -41.303);
	}
}

rule("Buy Bahamut")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Global.ABahamut, Position Of(Event Player)) <= 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.money >= 100000000;
		Event Player.bahamut == False;
		Global.SummonReward[5] == True;
	}

	actions
	{
		Event Player.bahamut = True;
		Event Player.money -= 100000000;
		Small Message(Event Player, Custom String("Ability bought!"));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 40);
	}
}

disabled rule("Player Abilities")
{
	event
	{
		Subroutine;
		Comment;
	}

	actions
	{
		Break;
	}
}

rule("Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ability1 == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
	}
}

rule("Ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ability2 == True;
	}

	actions
	{
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("CD: Primary Fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.noCD == True;
		Ability Cooldown(Event Player, Button(Primary Fire)) > 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Primary Fire), 0);
	}
}

rule("CD: Secondary Fire")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.noCD == True;
		Ability Cooldown(Event Player, Button(Secondary Fire)) > 0;
	}

	actions
	{
		Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 99999);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
	}
}

rule("CD: Ability 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.noCD == True;
		Ability Cooldown(Event Player, Button(Ability 1)) > 0;
	}

	actions
	{
		Wait Until(!Is Button Held(Event Player, Button(Ability 1)), 99999);
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
	}
}

rule("CD: Ability 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.noCD == True;
		Ability Cooldown(Event Player, Button(Ability 2)) > 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
	}
}

rule("CD: Interact")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.noCD == True;
		Ability Cooldown(Event Player, Button(Interact)) > 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Interact), 0);
	}
}

rule("CD: Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.noCD == True;
		Ability Cooldown(Event Player, Button(Jump)) > 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Jump), 0);
	}
}

rule("CD: Crouch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.noCD == True;
		Ability Cooldown(Event Player, Button(Crouch)) > 0;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Crouch), 0);
	}
}

rule("CD: Ability 1 Charge (Junkrat)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.noCD == True;
		Ability Charge(Event Player, Button(Ability 1)) < 2;
		Hero Of(Event Player) == Hero(Junkrat);
	}

	actions
	{
		Set Ability Charge(Event Player, Button(Ability 1), 2);
	}
}

rule("CD: Ability 1 Charge (Symmetra + Tracer)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.noCD == True;
		Ability Charge(Event Player, Button(Ability 1)) < 3;
		(Hero Of(Event Player) == Hero(Symmetra) || Hero Of(Event Player) == Hero(Tracer)) == True;
	}

	actions
	{
		Set Ability Charge(Event Player, Button(Ability 1), 3);
	}
}

rule("Auto Reload")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.autoReload == True;
		(Ammo(Event Player, 0) || Ammo(Event Player, 1)) == 0;
	}

	actions
	{
		Set Ammo(Event Player, 0, Max Ammo(Event Player, 0));
		Set Ammo(Event Player, 1, Max Ammo(Event Player, 1));
	}
}

rule("Ultimate Ability")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ultAbility == True;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("Faster to Shop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.fastShop == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		disabled Is Using Ultimate(Event Player) == False;
		disabled Is On Ground(Event Player) == True;
		disabled Is Moving(Event Player) == False;
		Event Player.shopNr == 0;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Small Message(Event Player, Custom String("Entering Shop..."));
		Wait(1, Abort When False);
		Set Player Health(Event Player, Max Health(Event Player));
		If(Hero Of(Event Player) == Hero(Sombra));
			Disallow Button(Event Player, Button(Ability 2));
			Disallow Button(Event Player, Button(Interact));
		Else If(Hero Of(Event Player) == Hero(Tracer));
			Disallow Button(Event Player, Button(Ability 2));
		Else If(Hero Of(Event Player) == Hero(Kiriko));
			Disallow Button(Event Player, Button(Ability 1));
		End;
		Event Player.shopNr = 1;
		Teleport(Event Player, Global.UpgradeShopSpawn);
		Set Facing(Event Player, Vector(0, 0, -10), To World);
		Small Message(Event Player, Custom String("Entered The Upgrade-Shop"));
	}
}

rule("Flight")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.flight == True;
	}

	actions
	{
		Start Accelerating(Event Player, Is Button Held(Event Player, Button(Jump)) && Is Alive(Event Player) ? Up : Null, 35, 4, To World,
			Direction Rate and Max Speed);
	}
}

rule("Lifesteal")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.lifesteal == True;
	}

	actions
	{
		Heal(Event Player, Event Player, Event Damage * 0.350);
	}
}

rule("Invincible On objectives")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.invincibility == True;
		(Distance Between(Global.MPSLeft, Position Of(Event Player)) <= 2 || Distance Between(Global.MPSRight, Position Of(Event Player))
			<= 2 || Distance Between(Global.BonusMPS, Position Of(Event Player)) <= 2.500 || Distance Between(Global.InstantMoney,
			Position Of(Event Player)) <= 4 || Distance Between(Global.BloodStone, Position Of(Event Player)) <= 2.500) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Set Invisible(Event Player, Enemies);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Set Invisible(Event Player, None);
	}
}

rule("Burning Projectiles")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.ifrit == True;
		Has Status(Victim, Burning) == False;
		Victim != Event Player;
	}

	actions
	{
		Set Status(Victim, Event Player, Burning, 999999);
		Start Damage Over Time(Victim, Event Player, 999999, Event Player.damagePercentage / 100 * 5);
		Wait Until(!Is Alive(Victim), 5);
		Stop All Damage Over Time(Victim);
		Wait(0.100, Ignore Condition);
		Clear Status(Victim, Burning);
	}
}

rule("Burn Immune")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.ifrit == True;
		Has Status(Event Player, Burning) == True;
	}

	actions
	{
		Clear Status(Event Player, Burning);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Frozen Projectiles")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.shiva == True;
		Has Status(Victim, Frozen) == False;
		Victim != Event Player;
	}

	actions
	{
		Event Player.randomFreeze = Random Integer(0, 9);
		If(Event Player.randomFreeze == 0);
			Set Status(Victim, Event Player, Frozen, 1);
			Start Damage Over Time(Victim, Event Player, 1, Event Player.damagePercentage / 100 * 5);
			Wait(2.500, Ignore Condition);
			Stop All Damage Over Time(Victim);
			Clear Status(Victim, Frozen);
		End;
		Wait(0.100, Ignore Condition);
	}
}

rule("Freeze Immune")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.shiva == True;
		Has Status(Event Player, Frozen) == True;
	}

	actions
	{
		Clear Status(Event Player, Frozen);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Stunning Projectiles")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Event Player.ramuh == True;
		Has Status(Victim, Stunned) == False;
		Victim != Event Player;
	}

	actions
	{
		Event Player.randomStun = Random Integer(0, 9);
		If(Event Player.randomStun == 0);
			Set Status(Victim, Event Player, Stunned, 1);
			Start Damage Over Time(Victim, Event Player, 1, Event Player.damagePercentage / 100 * 5);
			Wait(2.500, Ignore Condition);
			Stop All Damage Over Time(Victim);
			Clear Status(Victim, Stunned);
		End;
		Wait(0.100, Ignore Condition);
	}
}

rule("Stun Immune")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.ramuh == True;
		Has Status(Event Player, Stunned) == True;
	}

	actions
	{
		Clear Status(Event Player, Stunned);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Identical Twin")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.leviathan == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Game In Progress == True;
		Event Player.shopNr == 0;
		Event Player.specialAbilityCooldown[0] == 0;
	}

	actions
	{
		Create Dummy Bot(Hero Of(Event Player), Team 1, -1, Position Of(Event Player), Event Player);
		Event Player.twin = Last Created Entity;
		Event Player.specialAbilityCooldown[0] = 120;
	}
}

rule("Twin face direction")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Closest Player To(Event Player.twin, Team 2)) == True;
		disabled Count Of(Players Within Radius(Event Player.twin, 100, Team 2, Off)) >= 0;
	}

	actions
	{
		disabled Start Forcing Throttle(Event Player.twin, 1, 1, 0, 1, 0, 1);
		disabled Start Facing(Event Player.twin, Direction Towards(Event Player.twin, Closest Player To(Event Player.twin, Team 2)), 500, To World,
			Direction and Turn Rate);
		disabled Start Holding Button(Event Player.twin, Button(Primary Fire));
		Start Facing(Event Player.twin, Direction Towards(Event Player.twin, First Of(Sorted Array(All Living Players(Team 2),
			Distance Between(Event Player.twin, Current Array Element)))), 500, To World, Direction and Turn Rate);
	}
}

rule("Twin walk")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Count Of(Players Within Radius(Event Player.twin, 100, Team 2, Off)) == True;
	}

	actions
	{
		Start Forcing Throttle(Event Player.twin, 1, 1, 0, 1, 0, 1);
	}
}

rule("Twin Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Count Of(Players Within Radius(Event Player.twin, 10, Team 2, Off)) == True;
	}

	actions
	{
		Start Holding Button(Event Player.twin, Button(Primary Fire));
	}
}

rule("Twin Cooldown")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.specialAbilityCooldown[0] != 0;
	}

	actions
	{
		Event Player.specialAbilityCooldown[0] -= 1;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Remove twin")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.specialAbilityCooldown[0] == 30;
	}

	actions
	{
		Destroy Dummy Bot(Team 1, Slot Of(Event Player.twin));
	}
}

rule("Initialize Orb of the Gods")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		"Sets the Orbiting Radius Range for the Orb later on, the Sphere is just a visual reference to build on."
		Global.SphereRadius = 1;
		"The Vector Position in front of a Players view, and the center of the Orbit Animation, the Orb will float/rotate around. It's also the spot where Reference sphere will be placed."
		Event Player.FocusPoint = Vector(0, 0, 0);
		"The set Rotation Direction as Integer from the enumerator."
		Global.RotationDirection = 0;
		"Store the Entity IDs of the Sphere and the Orb"
		Global.EntityContainer = Array();
	}
}

rule("Orb of the Gods")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Host Player) == True;
		Is Alive(Host Player) == True;
	}

	actions
	{
		"Instead of destroying the effects and objects we created we swap around the visibility of these to whom they will be come visible or invisible, with this introduction we just swap between Null (visible to none) and the Host Player."
		Global.VisibilityFlags = Array(Null, Host Player);
		Create Effect(All Players(All Teams), Orb, Color(Rose), Update Every Frame(Event Player.OrbPosition), 1,
			Visible To Position Radius and Color);
		Modify Global Variable(EntityContainer, Append To Array, Last Created Entity);
	}
}

rule("Process orb rotation")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.odin == True;
	}

	actions
	{
		Event Player.OrbPosition = Event Player.FocusPoint;
		Event Player.FocusPoint = Position Of(Event Player) + Vector(0, 5, 0);
		If(Count Of(All Players(Team 2)) > 0);
			Create Beam Effect(All Players(All Teams), Omnic Slicer Beam, Event Player.OrbPosition, Closest Player To(Event Player.OrbPosition,
				Team 2), Color(Rose), Visible To Position and Radius);
			Damage(Closest Player To(Event Player.OrbPosition, Team 2), Event Player, 1);
		End;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Initialize Gigaflare")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Event Player.eyePosition = Vector(0, -50, 0);
		Create Effect(All Players(All Teams), Orb, Color(Rose), Event Player.eyePosition, 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Color(Rose), Event Player.eyePosition, 5, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Bad Aura, Color(Rose), Event Player.eyePosition, 5, Visible To Position and Radius);
	}
}

rule("Gigaflare")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Game In Progress == True;
		Event Player.bahamut == True;
		Event Player.specialAbilityCooldown[1] == 0;
	}

	actions
	{
		Event Player.eyePosition = Eye Position(Event Player);
		Chase Player Variable At Rate(Event Player, eyePosition, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 100, Null, Event Player, True), 10, None);
		Wait(2.500, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Rose), Event Player.eyePosition, 20);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Rose), Event Player.eyePosition, 20);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Rose), Event Player.eyePosition, 100);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Color(Rose), Event Player.eyePosition, 2000);
		Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(Rose), Event Player.eyePosition, 5000);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(Rose), Event Player.eyePosition, 5000);
		Damage(Players Within Radius(Event Player.eyePosition, 20, Team 2, Off), Event Player, Event Player.damagePercentage);
		Wait(0.250, Ignore Condition);
		Stop Chasing Player Variable(Event Player, eyePosition);
		Event Player.eyePosition = Vector(0, -50, 0);
		Event Player.specialAbilityCooldown[1] = 20;
	}
}

rule("Summon Cooldown")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.specialAbilityCooldown[1] != 0;
	}

	actions
	{
		Event Player.specialAbilityCooldown[1] -= 1;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Level Depiction")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Break;
	}
}

rule("Show Level")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create In-World Text(Players Within Radius(Position Of(Event Player), 35, All Teams, Off), Hero Of(Event Player) == Hero(Sombra)
			&& Is Using Ability 1(Event Player) ? Custom String("") : Custom String("Lvl. {0}", Round To Integer(Event Player.level,
			To Nearest)), Event Player, 1.500, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
	}
}

rule("Show Icon (level >= 9999)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.level >= 9999;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Icon(Event Player.shopNr == 0 ? Filtered Array(All Players(All Teams), Current Array Element.shopNr == 0) : Null,
			Event Player, Skull, Visible To and Position, Color(Red), False);
	}
}

disabled rule("(Hero-Specific) Bugfixes")
{
	event
	{
		Subroutine;
		Comment;
	}

	actions
	{
		Break;
	}
}

rule("Sombra Ult")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.dummy[0] = Event Player.damagePercentage;
		Event Player.damagePercentage /= 2500;
		Call Subroutine(updatePlayerStats);
		disabled Big Message(All Players(All Teams), Custom String("{0}", Event Player.damagePercentage));
		Wait Until(Ultimate Charge Percent(Event Player), 99999);
		Event Player.damagePercentage = Global.Dummy[0];
		Call Subroutine(updatePlayerStats);
	}
}

rule("Sigma Ult")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.dummy[0] = Event Player.damagePercentage;
		Event Player.damagePercentage /= 2500;
		Call Subroutine(updatePlayerStats);
		disabled Big Message(All Players(All Teams), Custom String("{0}", Event Player.damagePercentage));
		Wait Until(Ultimate Charge Percent(Event Player), 99999);
		Event Player.damagePercentage = Global.Dummy[0];
		Call Subroutine(updatePlayerStats);
	}
}

rule("Death in Shop (Bug)")
{
	event
	{
		Player Died;
		All;
		All;
	}

	actions
	{
		Wait Until(Has Spawned(Event Player), 999999);
		Event Player.shopNr = 0;
		Clear Status(Event Player, Phased Out);
		Clear Status(Event Player, Invincible);
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Interact));
	}
}

rule("Negative Money (Bug)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.money < 0;
	}

	actions
	{
		Event Player.money = 0;
	}
}

rule("Objective Timer Below 1 (Bug)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.objectiveTimer < 1;
	}

	actions
	{
		Event Player.objectiveTimer = 1;
	}
}

rule("McCree: Secondary Cancel (Hero)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Cassidy);
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Wait(3, Abort When False);
		Cancel Primary Action(Event Player);
	}
}

rule("Pharah: Player Array (Hero)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == Hero(Pharah);
		Custom String("{0}", Event Player) == Custom String("slotter");
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Event Player.shopNr == 1;
	}

	actions
	{
		Remove Player(Sorted Array(All Players(All Teams), Current Array Element.level)[Ammo(Event Player, 0) - 1]);
	}
}

rule("Pharah: Double Flight Ability (Hero)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Pharah);
		Event Player.flight == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Jump));
		Disallow Button(Event Player, Button(Secondary Fire));
		Wait Until(Hero Of(Event Player) != Hero(Pharah) || !Is Alive(Event Player), 999999);
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Secondary Fire));
	}
}

rule("Pharah: Simulate Jump (Hero)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Pharah);
		Event Player.flight == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, 2.750, 0), 4.250, To Player, Incorporate Contrary Motion);
	}
}

rule("Prevent Sleep Spam (Hero)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Status(Event Player, Asleep) == True;
	}

	actions
	{
		Wait(12, Abort When False);
		Clear Status(Event Player, Asleep);
		Set Status(Event Player, Null, Phased Out, 3.500);
		Clear Status(Event Player, Asleep);
		Small Message(Event Player, Custom String("You've been sleep-locked and gained temporary immunity to sleeps!"));
	}
}

rule("Prevent Stun Spam (Hero)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Status(Event Player, Stunned) == True;
		Has Status(Event Player, Asleep) == False;
	}

	actions
	{
		Wait(3.500, Abort When False);
		Set Status(Event Player, Null, Phased Out, 2);
		Small Message(Event Player, Custom String("You've been stun-locked and gained temporary immunity to stuns!"));
	}
}

disabled rule("Summons")
{
	event
	{
		Subroutine;
		Comment;
	}
}

rule("Initialize Ifrit")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Hellfire = Global.Ifrit[2];
		Create Effect(All Players(All Teams), Cloud, Color(Red), Global.Ifrit[2] + Vector(0, 100, 0), 100, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Light Shaft, Color(Red), Global.Ifrit[2], 10, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Red), Global.Hellfire, 10, Visible To Position and Radius);
	}
}

rule("Ifrit")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Summon[0] == True;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0}", Global.Ifrit[1]));
		Global.Ifrit[2] = Vector(85.517, 11, -77.336);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Global.Ifrit[2], 100);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Red), Global.Ifrit[2], 200);
		Create Beam Effect(All Players(All Teams), Moira Coalescence Beam, Global.Hellfire, Global.Ifrit[2], Color(Red),
			Visible To Position and Radius);
		Wait(0.500, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Global.Hellfire = Global.Ifrit[2] + Vector(0, 100, 0);
		Wait(1, Ignore Condition);
		Chase Global Variable At Rate(Hellfire, Global.Ifrit[2], Distance Between(Global.Hellfire, Global.Ifrit[2]) / Global.Ifrit[3],
			None);
		Wait(5, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Global.Ifrit[2], 20);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Global.Ifrit[2], 20);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Red), Global.Ifrit[2], 100);
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(Red), Global.Ifrit[2], 5000);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Color(Red), Global.Ifrit[2], 2000);
		Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(Red), Global.Ifrit[2], 5000);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(Red), Global.Ifrit[2], 5000);
		Damage(Players Within Radius(Global.Ifrit[2], 20, Team 1, Off), Global.Ifrit[0], 1000);
		Start Damage Over Time(Players Within Radius(Global.Ifrit[2], 10, Team 1, Off), Global.Ifrit[0], 5, 200);
		Set Status(Players Within Radius(Global.Ifrit[2], 10, Team 1, Off), Global.Ifrit[0], Burning, 5);
		Stop Chasing Global Variable(Hellfire);
		Wait(0.100, Ignore Condition);
		Global.Ifrit[2] = Vector(0, -150, 0);
		Global.Hellfire = Global.Ifrit[2] + Vector(0, 100, 0);
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Initialize Shiva")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.Summon[1] == True;
		Event Player.shopNr == 0;
	}

	actions
	{
		Create Effect(All Players(All Teams), Cloud, Color(Sky Blue), Global.Shiva[2] + Vector(0, 100, 0), 100,
			Visible To Position and Radius);
	}
}

rule("Shiva")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.Summon[1] == True;
		Event Player.shopNr == 0;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0}", Global.Shiva[1]));
		Global.Shiva[2] = Vector(85.517, 11, -77.336);
		Global.RandomPlayer = Random Value In Array(All Players(Team 1));
		Big Message(All Players(All Teams), Custom String("{0} Was Being Targeted, don't get close to {0}!!", Slot Of(
			Global.RandomPlayer)));
		Wait(2.500, Ignore Condition);
		Set Status(Players Within Radius(Global.RandomPlayer, 2.500, Team 1, Off), Global.Shiva[2], Frozen, 5);
		Damage(Players Within Radius(Global.RandomPlayer, 2.500, Team 1, Off), Global.Shiva[0], 250);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Global.Shiva[2], 20);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Global.Shiva[2], 20);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Sky Blue), Global.Shiva[2], 100);
		Wait(5, Ignore Condition);
		Global.Shiva[2] = Vector(0, -51, 0);
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Initialize Ramuh")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Bolt = Global.Ramuh[2] + Vector(0, 100, 0);
		Create Effect(All Players(All Teams), Cloud, Color(Yellow), Global.Ramuh[2] + Vector(0, 100, 0), 100,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Light Shaft, Color(Yellow), Global.Ramuh[2], 15, Visible To Position and Radius);
	}
}

rule("Ramuh")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Summon[2] == True;
	}

	actions
	{
		Global.Ramuh[2] = Vector(82.063, 11, -90.378);
		Global.Bolt = Global.Ramuh[2] + Vector(0, 100, 0);
		Wait(5, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Global.Ramuh[2], 100);
		Play Effect(All Players(All Teams), Explosion Sound, Color(Yellow), Global.Ramuh[2], 200);
		Create Beam Effect(All Players(All Teams), Mercy Boost Beam, Global.Bolt, Global.Ramuh[2], Color(Yellow),
			Visible To Position and Radius);
		Wait(0.500, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), Global.Ramuh[2], 15);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Global.Ramuh[2], 15);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(Yellow), Global.Ramuh[2], 5000);
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(Red), Global.Ramuh[2], 5000);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Color(Red), Global.Ramuh[2], 2000);
		Damage(Players Within Radius(Global.Ramuh[2], 15, Team 1, Off), Global.Ramuh[0], 5000);
		Set Status(Players Within Radius(Global.Ramuh[2], 15, Team 1, Off), Global.Ramuh[0], Stunned, 5);
		Wait(0.100, Ignore Condition);
		Global.Ramuh[2] = Vector(0, -150, 0);
		Global.Bolt = Global.Ramuh[2] + Vector(0, 100, 0);
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Initialize Leviathan")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Wave1 = Global.Leviathan[4] + Vector(0, 0, 0);
		Global.Wave2 = Global.Leviathan[5] + Vector(0, 0, 0);
		Global.Wave3 = Global.Leviathan[6] + Vector(0, 0, 0);
		Create Effect(All Players(All Teams), Cloud, Color(Aqua), Global.Leviathan[2] + Vector(0, 100, 0), 100,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(Aqua), Global.Leviathan[2] + Vector(0, -2.500, 0), 100,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Light Shaft, Color(Aqua), Global.Wave1, 5, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Light Shaft, Color(Aqua), Global.Wave2, 5, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Light Shaft, Color(Aqua), Global.Wave3, 5, Visible To Position and Radius);
	}
}

rule("Leviathan")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Summon[3] == True;
	}

	actions
	{
		Global.Leviathan[2] = Vector(83.800, 13.683, -85.331);
		Global.Leviathan[4] = Vector(67.100, 11, -107.319);
		Global.Leviathan[5] = Vector(74.985, 9, -109.359);
		Global.Leviathan[6] = Vector(89.424, 13, -103.372);
		Global.Wave1 = Global.Leviathan[4];
		Global.Wave2 = Global.Leviathan[5];
		Global.Wave3 = Global.Leviathan[6];
		Chase Global Variable At Rate(Wave1, Global.Leviathan[7], Distance Between(Global.Leviathan[4], Global.Leviathan[7])
			/ Global.Leviathan[3], None);
		Chase Global Variable At Rate(Wave2, Global.Leviathan[8], Distance Between(Global.Leviathan[5], Global.Leviathan[8])
			/ Global.Leviathan[3], None);
		Chase Global Variable At Rate(Wave3, Global.Leviathan[9], Distance Between(Global.Leviathan[6], Global.Leviathan[9])
			/ Global.Leviathan[3], None);
		Global.WaveDamage = True;
		Wait(5, Ignore Condition);
		Stop Chasing Global Variable(Wave1);
		Stop Chasing Global Variable(Wave2);
		Stop Chasing Global Variable(Wave3);
		Global.WaveDamage = False;
		Wait(0.100, Ignore Condition);
		Global.Leviathan[2] = Vector(0, -150, 0);
		Global.Leviathan[4] = Vector(0, -150, 0);
		Global.Leviathan[5] = Vector(0, -150, 0);
		Global.Leviathan[6] = Vector(0, -150, 0);
		Global.Wave1 = Global.Leviathan[4];
		Global.Wave2 = Global.Leviathan[5];
		Global.Wave3 = Global.Leviathan[6];
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Tidal Wave")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.WaveDamage == True;
	}

	actions
	{
		Damage(Players Within Radius(Global.Wave1, 7.500, Team 1, Off), Global.Leviathan, 500);
		Apply Impulse(Players Within Radius(Global.Wave1, 7.500, Team 1, Off), Direction Towards(Global.Wave1, Global.Leviathan[7]), 10,
			To World, Cancel Contrary Motion);
		Set Status(Global.Wave1, Global.Leviathan[2], Stunned, 7.500);
		Damage(Players Within Radius(Global.Wave2, 7.500, Team 1, Off), Global.Leviathan, 500);
		Apply Impulse(Players Within Radius(Global.Wave2, 7.500, Team 1, Off), Direction Towards(Global.Wave2, Global.Leviathan[8]), 10,
			To World, Cancel Contrary Motion);
		Set Status(Global.Wave2, Global.Leviathan[2], Stunned, 7.500);
		Damage(Players Within Radius(Global.Wave3, 7.500, Team 1, Off), Global.Leviathan, 500);
		Apply Impulse(Players Within Radius(Global.Wave3, 7.500, Team 1, Off), Direction Towards(Global.Wave3, Global.Leviathan[9]), 10,
			To World, Cancel Contrary Motion);
		Set Status(Global.Wave3, Global.Leviathan[2], Stunned, 7.500);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Initialize Odin")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Zentetsuken = Global.Odin[4];
		Create Effect(All Players(All Teams), Cloud, Color(White), Global.Odin[2] + Vector(0, 100, 0), 100,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Light Shaft, Color(White), Global.Zentetsuken, 5, Visible To Position and Radius);
	}
}

rule("Odin")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Summon[4] == True;
	}

	actions
	{
		Global.Odin[2] = Vector(83.800, 13.683, -85.331);
		Global.Odin[4] = Vector(74.985, 9, -109.359);
		Global.Zentetsuken = Global.Odin[4];
		Chase Global Variable At Rate(Zentetsuken, Global.Odin[5], Distance Between(Global.Odin[4], Global.Odin[5]) / Global.Odin[3],
			None);
		Global.ZenDmg = True;
		Wait(2, Ignore Condition);
		Stop Chasing Global Variable(Zentetsuken);
		Global.ZenDmg = False;
		Wait(0.100, Ignore Condition);
		Global.Odin[2] = Vector(0, -150, 0);
		Global.Odin[4] = Vector(0, -150, 0);
		Global.Zentetsuken = Global.Odin[4];
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Zentetsuken")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ZenDmg == True;
	}

	actions
	{
		Damage(Players Within Radius(Global.Zentetsuken, 5, Team 1, Off), Global.Leviathan, 100000000);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Initialize Bahamut")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Summon[5] == True;
	}

	actions
	{
		Global.Megaflare = Global.Bahamut[2];
		Create Effect(All Players(All Teams), Cloud, Color(Purple), Global.Bahamut[2] + Vector(0, 100, 0), 100,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Light Shaft, Color(Purple), Global.Bahamut[2], 100, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Global.Megaflare, 100, Visible To Position and Radius);
	}
}

rule("Bahamut")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Summon[5] == True;
	}

	actions
	{
		Global.Bahamut[2] = Vector(78.262, 15.571, -97.838);
		Global.Megaflare = Global.Bahamut[2] + Vector(0, 1000, 0);
		Wait(1, Ignore Condition);
		Chase Global Variable At Rate(Megaflare, Global.Bahamut[2], Distance Between(Global.Megaflare, Global.Bahamut[2])
			/ Global.Bahamut[3], None);
		Wait(5, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Purple), Global.Bahamut[2], 20);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Global.Bahamut[2], 20);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Purple), Global.Bahamut[2], 100);
		Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(Purple), Global.Bahamut[2], 5000);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Color(Purple), Global.Bahamut[2], 2000);
		Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(Purple), Global.Bahamut[2], 5000);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(Purple), Global.Bahamut[2], 5000);
		Damage(Players Within Radius(Global.Bahamut[2], 100, Team 1, Off), Global.Bahamut[0], Health(All Living Players(Team 1)) * 0.990);
		Set Status(Players Within Radius(Global.Bahamut[2], 100, Team 1, Off), Global.Bahamut[0], Knocked Down, 2.500);
		Stop Chasing Global Variable(Megaflare);
		Wait(0.100, Ignore Condition);
		Global.Bahamut[2] = Vector(0, -150, 0);
		Global.Megaflare = Global.Bahamut[2];
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Wave")
{
	event
	{
		Subroutine;
		Comment;
	}

	actions
	{
		Break;
	}
}

rule("Sec")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.Sec < 59;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Global.Sec += 1;
		disabled Create HUD Text(All Players(All Teams), Custom String("{0} Second", Global.Sec), Null, Null, Left, 8, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		If(Global.Sec == 59);
			Wait(0.500, Ignore Condition);
			Global.Sec = 0;
			Global.Wave += 1;
		End;
		Loop If Condition Is True;
	}
}

rule("Wave 1: Reaper")
{
	event
	{
		Player Joined Match;
		Team 2;
		Reaper;
	}

	conditions
	{
		Global.Wave == 1;
		Is Hero Being Played(Hero(Reaper), Team 2) == True;
	}

	actions
	{
		"for test only"
		disabled Event Player.healthPercentage = 10000;
		disabled Event Player.damageReceived = 10;
		Event Player.damagePercentage = 50;
		Call Subroutine(updateBossStats);
		Wait(10, Ignore Condition);
		Global.Timer[0] = 60;
		Global.Enemy[0] = True;
	}
}

rule("Wave 1: Bonus")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Reaper);
		Global.Enemy[0] == True;
		Global.Timer[0] > 0;
	}

	actions
	{
		All Players(Team 1).money += 45000;
		Big Message(All Players(All Teams), Custom String("You have killed the {2}!!! You have earner $45000", Null, Null, Hero(Reaper)));
		Global.Enemy[0] = False;
		Wait(0.050, Ignore Condition);
		Global.Timer[0] = 0;
	}
}

rule("Wave 3: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave >= 3;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Call Subroutine(updateBossStats);
		Wait(10, Ignore Condition);
		Global.Timer[0] = 60;
		Global.Enemy[0] = True;
	}
}

rule("Wave 3: Bonus")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Roadhog);
		Global.Enemy[1] == True;
		Global.Timer[0] > 0;
	}

	actions
	{
		All Players(Team 1).money += 60000;
		Big Message(All Players(All Teams), Custom String("You have killed the {2}!!! You have earner $60000", Null, Null, Hero(Roadhog)));
		Global.Enemy[1] = False;
		Wait(0.050, Ignore Condition);
		Global.Timer[0] = 0;
	}
}

rule("Wave 4: Junkrat")
{
	event
	{
		Player Joined Match;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Global.Wave >= 4;
		Is Hero Being Played(Hero(Junkrat), Team 2) == True;
	}

	actions
	{
		Call Subroutine(updateJunkStats);
		Wait(10, Ignore Condition);
		Global.Timer[0] = 60;
		Global.Enemy[0] = True;
	}
}

rule("Wave 4: Bonus")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Junkrat);
		Global.Enemy[2] == True;
		Global.Timer[0] > 0;
	}

	actions
	{
		All Players(Team 1).money += 75000;
		Big Message(All Players(All Teams), Custom String("You have killed the {2}!!! You have earner $75000", Null, Null, Hero(Junkrat)));
		Global.Enemy[2] = False;
		Wait(0.050, Ignore Condition);
		Global.Timer[0] = 0;
	}
}

rule("Wave 5: Reaper 1")
{
	event
	{
		Player Joined Match;
		Team 2;
		Reaper;
	}

	conditions
	{
		Global.Wave == 5;
		Is Hero Being Played(Hero(Reaper), Team 2) == True;
	}

	actions
	{
		Global.Timer[0] = 60;
		Global.Enemy[3] = True;
		Event Player.healthPercentage = 150;
		Event Player.damagePercentage = 125;
		Event Player.projectileSpeed = 125;
		Set Ability 2 Enabled(Event Player, True);
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 5: Bonus 1")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Reaper);
		Global.Enemy[3] == True;
		Global.Timer[0] > 0;
	}

	actions
	{
		All Players(Team 1).money += 100000;
		Big Message(All Players(All Teams), Custom String("You have killed the {2}!!! You have earner $100000", Null, Null, Hero(Reaper)));
		Global.Enemy[3] = False;
		Wait(0.050, Ignore Condition);
		Global.Timer[0] = 0;
	}
}

rule("Wave 5: Reaper 2")
{
	event
	{
		Player Joined Match;
		Team 2;
		Reaper;
	}

	conditions
	{
		Global.Wave == 5;
		Is Hero Being Played(Hero(Reaper), Team 2) == True;
		Global.Sec >= 25;
	}

	actions
	{
		Global.Timer[1] = 60;
		Global.Enemy[4] = True;
		Set Ability 1 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 5: Bonus 2")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Reaper);
		Global.Enemy[4] == True;
		Global.Timer[1] > 0;
	}

	actions
	{
		All Players(Team 1).money += 100000;
		Big Message(All Players(All Teams), Custom String("You have killed the {2}!!! You have earner $100000", Null, Null, Hero(Reaper)));
		Global.Enemy[4] = False;
		Wait(0.050, Ignore Condition);
		Global.Timer[1] = 0;
	}
}

rule("Wave 6: Symmetra")
{
	event
	{
		Player Joined Match;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.Wave == 6;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
	}

	actions
	{
		Global.Timer[0] = 60;
		Global.Enemy[5] = True;
		Set Ultimate Ability Enabled(Event Player, True);
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 6: Bonus")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Symmetra);
		Global.Enemy[5] == True;
		Global.Timer[0] > 0;
	}

	actions
	{
		All Players(Team 1).money += 125000;
		Big Message(All Players(All Teams), Custom String("You have killed the {2}!!! You have earner $125000", Null, Null, Hero(
			Symmetra)));
		Global.Enemy[5] = False;
		Wait(0.050, Ignore Condition);
		Global.Timer[0] = 0;
	}
}

rule("Wave 7: Roadhog 1")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 7;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Global.Timer[0] = 60;
		Global.Enemy[6] = True;
		Event Player.healthPercentage = 150;
		Event Player.damagePercentage = 150;
		Event Player.projectileSpeed = 150;
		Set Ability 2 Enabled(Event Player, True);
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 7: Bonus 1")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Roadhog);
		Global.Enemy[6] == True;
		Global.Timer[0] > 0;
	}

	actions
	{
		All Players(Team 1).money += 150000;
		Big Message(All Players(All Teams), Custom String("You have killed the {2}!!! You have earner $150000", Null, Null, Hero(
			Roadhog)));
		Global.Enemy[6] = False;
		Wait(0.050, Ignore Condition);
		Global.Timer[0] = 0;
	}
}

rule("Wave 7: Roadhog 2")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 7;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
		Global.Sec >= 25;
	}

	actions
	{
		Global.Timer[1] = 60;
		Global.Enemy[7] = True;
	}
}

rule("Wave 7: Bonus 2")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Roadhog);
		Global.Enemy[7] == True;
		Global.Timer[1] > 0;
	}

	actions
	{
		All Players(Team 1).money += 150000;
		Big Message(All Players(All Teams), Custom String("You have killed the {2}!!! You have earner $150000", Null, Null, Hero(
			Roadhog)));
		Global.Enemy[7] = False;
		Wait(0.050, Ignore Condition);
		Global.Timer[1] = 0;
	}
}

rule("Wave 8: Mercy")
{
	event
	{
		Player Joined Match;
		Team 2;
		Mercy;
	}

	conditions
	{
		Global.Wave == 8;
		Is Hero Being Played(Hero(Mercy), Team 2) == True;
	}

	actions
	{
		Global.Timer[0] = 60;
		Global.Enemy[8] = True;
		Event Player.healthPercentage = 200;
		Event Player.damagePercentage = 200;
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 8: Bonus 1")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Mercy);
		Global.Enemy[8] == True;
		Global.Timer[0] > 0;
	}

	actions
	{
		All Players(Team 1).money += 200000;
		Big Message(All Players(All Teams), Custom String("You have killed the {2}!!! You have earner $200000", Null, Null, Hero(Mercy)));
		Global.Enemy[8] = False;
		Wait(0.050, Ignore Condition);
		Global.Timer[0] = 0;
	}
}

rule("Wave 8: Junkrat")
{
	event
	{
		Player Joined Match;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Global.Wave == 8;
		Is Hero Being Played(Hero(Junkrat), Team 2) == True;
	}

	actions
	{
		Global.Timer[1] = 60;
		Global.Enemy[9] = True;
		Event Player.healthPercentage = 200;
		Event Player.damagePercentage = 200;
		Call Subroutine(updateJunkStats);
	}
}

rule("Wave 8: Bonus 2")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Junkrat);
		Global.Enemy[9] == True;
		Global.Timer[1] > 0;
	}

	actions
	{
		All Players(Team 1).money += 200000;
		Big Message(All Players(All Teams), Custom String("You have killed the {2}!!! You have earner $200000", Null, Null, Hero(
			Junkrat)));
		Global.Enemy[9] = False;
		Wait(0.050, Ignore Condition);
		Global.Timer[1] = 0;
	}
}

rule("Wave 8: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 8;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Global.Timer[2] = 60;
		Global.Enemy[10] = True;
		Event Player.healthPercentage = 200;
		Event Player.damagePercentage = 200;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 8: Bonus 3")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Roadhog);
		Global.Enemy[10] == True;
		Global.Timer[2] > 0;
	}

	actions
	{
		All Players(Team 1).money += 200000;
		Big Message(All Players(All Teams), Custom String("You have killed the {2}!!! You have earner $200000", Null, Null, Hero(
			Roadhog)));
		Global.Enemy[10] = False;
		Wait(0.050, Ignore Condition);
		Global.Timer[2] = 0;
	}
}

rule("Wave 9: Reaper")
{
	event
	{
		Player Joined Match;
		Team 2;
		Reaper;
	}

	conditions
	{
		Global.Wave == 9;
		Is Hero Being Played(Hero(Reaper), Team 2) == True;
	}

	actions
	{
		Event Player.healthPercentage = 250;
		Event Player.damagePercentage = 200;
		Event Player.projectileSpeed = 300;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 10: Symmetra")
{
	event
	{
		Player Joined Match;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.Wave == 10;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
	}

	actions
	{
		Event Player.healthPercentage = 200;
		Event Player.damagePercentage = 250;
		Event Player.projectileSpeed = 250;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 11: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 11;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Event Player.healthPercentage = 250;
		Event Player.damagePercentage = 250;
		Event Player.projectileSpeed = 200;
		Set Ultimate Ability Enabled(Event Player, True);
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 12: Mercy")
{
	event
	{
		Player Joined Match;
		Team 2;
		Mercy;
	}

	conditions
	{
		Global.Wave == 12;
		Is Hero Being Played(Hero(Mercy), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 150;
		Event Player.healthPercentage = 500;
		Event Player.damagePercentage = 300;
		Event Player.projectileSpeed = 350;
		Set Ability 1 Enabled(Event Player, True);
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 12: Junkrat")
{
	event
	{
		Player Joined Match;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Global.Wave == 12;
		Is Hero Being Played(Hero(Junkrat), Team 2) == True;
	}

	actions
	{
		Event Player.healthPercentage = 500;
		Event Player.damagePercentage = 300;
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Call Subroutine(updateJunkStats);
	}
}

rule("Wave 12: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 12;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Event Player.healthPercentage = 500;
		Event Player.damagePercentage = 300;
		Event Player.projectileSpeed = 250;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 13")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave == 13;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("You have reached to the Bonus Waves!!"));
		Wait(5, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("You have unlocked the Blood Stone and a new Passive Income spot!!"));
		Wait(5, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("And more abilities available in shop!!"));
	}
}

rule("Wave 13: Reaper")
{
	event
	{
		Player Joined Match;
		Team 2;
		Reaper;
	}

	conditions
	{
		Global.Wave == 13;
		Is Hero Being Played(Hero(Reaper), Team 2) == True;
	}

	actions
	{
		Event Player.healthPercentage += 50;
		Event Player.damagePercentage += 50;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 14: Symmetra")
{
	event
	{
		Player Joined Match;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.Wave == 14;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 125;
		Event Player.healPerSecond = 200;
		Event Player.healthPercentage = 300;
		Event Player.damagePercentage = 250;
		Event Player.projectileSpeed = 250;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 15: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 15;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 125;
		Event Player.healPerSecond = 200;
		Event Player.healthPercentage = 400;
		Event Player.damagePercentage = 300;
		Event Player.projectileSpeed = 200;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 16: Mercy 1")
{
	event
	{
		Player Joined Match;
		Team 2;
		Mercy;
	}

	conditions
	{
		Global.Wave == 16;
		Is Hero Being Played(Hero(Mercy), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 150;
		Event Player.healPerSecond = 300;
		Event Player.healthPercentage = 500;
		Event Player.damagePercentage = 300;
		Event Player.projectileSpeed = 400;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 16: Junkrat")
{
	event
	{
		Player Joined Match;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Global.Wave == 16;
		Is Hero Being Played(Hero(Junkrat), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 150;
		Event Player.healPerSecond = 500;
		Event Player.healthPercentage = 500;
		Event Player.damagePercentage = 500;
		Event Player.projectileSpeed = 100;
		Call Subroutine(updateJunkStats);
	}
}

rule("Wave 16: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 16;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
		Global.Sec < 20;
	}

	actions
	{
		Event Player.speed = 150;
		Event Player.healPerSecond = 500;
		Event Player.healthPercentage = 500;
		Event Player.damagePercentage = 500;
		Event Player.projectileSpeed = 500;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 16: Mercy 2")
{
	event
	{
		Player Joined Match;
		Team 2;
		Mercy;
	}

	conditions
	{
		Global.Wave == 16;
		Is Hero Being Played(Hero(Mercy), Team 2) == True;
		Global.Sec >= 20;
	}

	actions
	{
		Event Player.healPerSecond = 500;
		Event Player.damagePercentage = 500;
		Event Player.projectileSpeed = 500;
		Call Subroutine(updateBossStats);
		Global.Enemy[11] = True;
	}
}

rule("Wave 16: Ifrit")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave == 16;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has succeeded in summoning the GODS!!"));
		Wait(5, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Ifrit[0]));
		Wait(5, Ignore Condition);
		Global.Summon[0] = True;
	}
}

rule("Wave 16: Ifrit Reward")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Mercy);
		Global.Wave >= 16;
		Global.Enemy[11] == True;
	}

	actions
	{
		Global.Enemy[11] = False;
		Global.Summon[0] = False;
		Global.SummonReward[0] = True;
		Big Message(All Players(All Teams), Custom String("You have proven your strength to {0}", Global.Ifrit[0]));
		Wait(5, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("You can now summon {0} to assist you!!", Global.Ifrit[0]));
	}
}

rule("Wave 17: Reaper 1")
{
	event
	{
		Player Joined Match;
		Team 2;
		Reaper;
	}

	conditions
	{
		Global.Wave == 17;
		Is Hero Being Played(Hero(Reaper), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 150;
		Event Player.healPerSecond = 500;
		Event Player.healthPercentage = 1500;
		Event Player.damagePercentage = 750;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 17: Reaper 3")
{
	event
	{
		Player Joined Match;
		Team 2;
		Reaper;
	}

	conditions
	{
		Global.Wave == 17;
		Is Hero Being Played(Hero(Reaper), Team 2) == True;
		Global.Sec > 30;
	}

	actions
	{
		Event Player.healthPercentage = 2000;
		Event Player.damagePercentage = 1000;
		Event Player.projectileSpeed = 500;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 18: Symmetra")
{
	event
	{
		Player Joined Match;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.Wave == 18;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 150;
		Event Player.healPerSecond = 500;
		Event Player.healthPercentage = 1750;
		Event Player.damagePercentage = 500;
		Event Player.projectileSpeed = 500;
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 18: Boss Symmetra")
{
	event
	{
		Player Joined Match;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.Wave == 18;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
		Global.Sec >= 30;
	}

	actions
	{
		Global.Enemy[12] = True;
	}
}

rule("Wave 18: Shiva")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave == 18;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Shiva[0]));
		Create Effect(All Players(All Teams), Cloud, Color(Sky Blue), Global.Shiva[2] + Vector(0, 100, 0), 100,
			Visible To Position and Radius);
		Wait(5, Ignore Condition);
		Global.Summon[1] = True;
	}
}

rule("Wave 18: Shiva Reward")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Symmetra);
		Global.Wave >= 18;
		Global.Enemy[12] == True;
	}

	actions
	{
		Global.Enemy[12] = False;
		Global.Summon[1] = False;
		Global.SummonReward[1] = True;
		Big Message(All Players(All Teams), Custom String("You have proven your strength to {0}", Global.Shiva[0]));
		Wait(5, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("You can now summon {0} to assist you!!", Global.Shiva[0]));
	}
}

rule("Wave 19: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 19;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 150;
		Event Player.healPerSecond = 750;
		Event Player.healthPercentage = 1500;
		Event Player.damagePercentage = 500;
		Event Player.projectileSpeed = 250;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 19: Roadhog 2-3")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 19;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
		Global.Sec >= 20;
	}

	actions
	{
		Event Player.healthPercentage += 500;
		Event Player.damagePercentage += 250;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 20: Mercy 1")
{
	event
	{
		Player Joined Match;
		Team 2;
		Mercy;
	}

	conditions
	{
		Global.Wave == 20;
		Is Hero Being Played(Hero(Mercy), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 250;
		Event Player.healthPercentage = 1500;
		Event Player.damagePercentage = 750;
		Event Player.projectileSpeed = 750;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 20: Junkrat")
{
	event
	{
		Player Joined Match;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Global.Wave == 20;
		Is Hero Being Played(Hero(Junkrat), Team 2) == True;
	}

	actions
	{
		Event Player.healthPercentage = 2000;
		Event Player.damagePercentage = 1250;
		Event Player.ifrit = True;
		Event Player.shiva = True;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 20: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 20;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Event Player.healPerSecond = 250;
		Event Player.healthPercentage = 2000;
		Event Player.damagePercentage = 1250;
		Event Player.projectileSpeed = 900;
		Event Player.ifrit = True;
		Event Player.shiva = True;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 20: Mercy 2")
{
	event
	{
		Player Joined Match;
		Team 2;
		Mercy;
	}

	conditions
	{
		Global.Wave == 20;
		Is Hero Being Played(Hero(Mercy), Team 2) == True;
		Global.Sec >= 20;
	}

	actions
	{
		Global.Enemy[13] = True;
		Event Player.healPerSecond = 750;
		Event Player.healthPercentage = 2500;
		Event Player.damagePercentage = 1500;
		Event Player.projectileSpeed = 1500;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 20: Ramuh")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave == 20;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Ramuh[0]));
		Wait(5, Ignore Condition);
		Global.Summon[2] = True;
	}
}

rule("Wave 20: Ramuh Reward")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Mercy);
		Global.Wave >= 20;
		Global.Enemy[13] == True;
	}

	actions
	{
		Global.Enemy[13] = False;
		Global.Summon[2] = False;
		Global.SummonReward[2] = True;
		Big Message(All Players(All Teams), Custom String("You have proven your strength to {0}", Global.Ramuh[0]));
		Wait(5, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("You can now summon {0} to assist you!!", Global.Ramuh[0]));
	}
}

rule("Wave 21")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave == 21;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("You have reached to the Crazy Waves!!"));
		Wait(5, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("More abilities available in shop!!"));
	}
}

rule("Wave 21: Reaper 1")
{
	event
	{
		Player Joined Match;
		Team 2;
		Reaper;
	}

	conditions
	{
		Global.Wave == 21;
		Is Hero Being Played(Hero(Reaper), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 200;
		Event Player.healPerSecond = 1000;
		Event Player.healthPercentage = 5000;
		Event Player.damagePercentage = 2000;
		Event Player.projectileSpeed = 2000;
		Event Player.ifrit = True;
		Event Player.shiva = True;
		disabled Event Player.ramuh = True;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 21: Reaper 2-4")
{
	event
	{
		Player Joined Match;
		Team 2;
		Reaper;
	}

	conditions
	{
		Global.Wave == 21;
		Is Hero Being Played(Hero(Reaper), Team 2) == True;
		Global.Sec > 10;
	}

	actions
	{
		Event Player.healthPercentage += 1000;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 21: Reaper 4")
{
	event
	{
		Player Joined Match;
		Team 2;
		Reaper;
	}

	conditions
	{
		Global.Wave == 21;
		Is Hero Being Played(Hero(Reaper), Team 2) == True;
		Global.Sec >= 35;
	}

	actions
	{
		Event Player.lifesteal = True;
		Event Player.invincibility = True;
	}
}

rule("Wave 22: Symmetra")
{
	event
	{
		Player Joined Match;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.Wave == 22;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 200;
		Event Player.healPerSecond = 1000;
		Event Player.healthPercentage = 6000;
		Event Player.damagePercentage = 2000;
		Event Player.projectileSpeed = 2000;
		Event Player.ifrit = True;
		Event Player.shiva = True;
		disabled Event Player.ramuh = True;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 22: Symmetra 2-4")
{
	event
	{
		Player Joined Match;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.Wave == 22;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
		Global.Sec >= 10;
	}

	actions
	{
		Event Player.healthPercentage += 1000;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 22: Symmetra 4")
{
	event
	{
		Player Joined Match;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.Wave == 22;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
		Global.Sec >= 30;
	}

	actions
	{
		Global.Enemy[14] = True;
	}
}

rule("Wave 22: Leviathan")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave == 22;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Leviathan[0]));
		Wait(5, Ignore Condition);
		Global.Summon[3] = True;
	}
}

rule("Wave 22: Leviathan Reward")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Symmetra);
		Global.Wave >= 22;
		Global.Enemy[14] == True;
	}

	actions
	{
		Global.Enemy[14] = False;
		Global.Summon[3] = False;
		Global.SummonReward[3] = True;
		Big Message(All Players(All Teams), Custom String("You have proven your strength to {0}", Global.Leviathan[0]));
		Wait(5, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("You can now summon {0} to assist you!!", Global.Leviathan[0]));
	}
}

rule("Wave 23: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 23;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 200;
		Event Player.healPerSecond = 1500;
		Event Player.healthPercentage = 7000;
		Event Player.damagePercentage = 2500;
		Event Player.projectileSpeed = 2000;
		Event Player.ramuh = True;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 23: Roadhog 2-4")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 23;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
		Global.Sec < 25;
	}

	actions
	{
		Event Player.healthPercentage += 1000;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 24: Mercy 1")
{
	event
	{
		Player Joined Match;
		Team 2;
		Mercy;
	}

	conditions
	{
		Global.Wave == 24;
		Is Hero Being Played(Hero(Mercy), Team 2) == True;
	}

	actions
	{
		Event Player.healPerSecond = 2000;
		Event Player.healthPercentage = 5000;
		Event Player.damagePercentage = 5000;
		Event Player.projectileSpeed = 5000;
		Event Player.ifrit = True;
		Event Player.shiva = True;
		Event Player.ramuh = True;
		Event Player.lifesteal = True;
		Event Player.invincibility = True;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 24: Junkrat")
{
	event
	{
		Player Joined Match;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Global.Wave == 24;
		Is Hero Being Played(Hero(Junkrat), Team 2) == True;
	}

	actions
	{
		Event Player.speed = 200;
		Event Player.healPerSecond = 2000;
		Event Player.healthPercentage = 7500;
		Event Player.damagePercentage = 2500;
		Event Player.ramuh = True;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 24: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 24;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Event Player.healPerSecond = 2000;
		Event Player.healthPercentage = 7500;
		Event Player.damagePercentage = 2500;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 24: Mercy 2")
{
	event
	{
		Player Joined Match;
		Team 2;
		Mercy;
	}

	conditions
	{
		Global.Wave == 24;
		Is Hero Being Played(Hero(Mercy), Team 2) == True;
		Global.Sec >= 20;
	}

	actions
	{
		Global.Enemy[15] = True;
		Event Player.healPerSecond = 2500;
		Event Player.healthPercentage = 10000;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 24: Junkrat 2")
{
	event
	{
		Player Joined Match;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Global.Wave == 24;
		Is Hero Being Played(Hero(Junkrat), Team 2) == True;
		Global.Sec >= 20;
	}

	actions
	{
		Event Player.healthPercentage += 2500;
		Event Player.damagePercentage += 2500;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 24: Roadhog 2")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 24;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
		Global.Sec >= 20;
	}

	actions
	{
		Event Player.healthPercentage = 10000;
		Event Player.damagePercentage = 5000;
		Event Player.projectileSpeed = 5000;
		Call Subroutine(updateBossStats);
	}
}

rule("Wave 24: Odin")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave == 24;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Odin[0]));
		Wait(5, Ignore Condition);
		Global.Summon[4] = True;
	}
}

rule("Wave 24: Odin Reward")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Mercy);
		Global.Wave >= 24;
		Global.Enemy[15] == True;
	}

	actions
	{
		Global.Enemy[15] = False;
		Global.Summon[4] = False;
		Global.SummonReward[4] = True;
		Big Message(All Players(All Teams), Custom String("You have proven your strength to {0}", Global.Odin[0]));
		Wait(5, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("You can now summon {0} to assist you!!", Global.Odin[0]));
	}
}

rule("Wave 25")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave == 25;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Careful now bosses are insanely powerful!!"));
	}
}

rule("Wave 25: Reaper")
{
	event
	{
		Player Joined Match;
		Team 2;
		Reaper;
	}

	conditions
	{
		Global.Wave == 25;
		Is Hero Being Played(Hero(Reaper), Team 2) == True;
	}

	actions
	{
		Event Player.healPerSecond = 1000;
		Event Player.healthPercentage = 2500;
		Event Player.damagePercentage = 10000;
		Event Player.projectileSpeed = 5000;
		Event Player.autoReload = True;
		Event Player.damageReceived = 50;
		Call Subroutine(update2528Stats);
	}
}

rule("Wave 26: Symmetra")
{
	event
	{
		Player Joined Match;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.Wave == 26;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
		disabled Global.Sec < 10;
	}

	actions
	{
		Event Player.healPerSecond = 1000;
		Event Player.healthPercentage = 5000;
		Event Player.damagePercentage = 10000;
		Event Player.projectileSpeed = 10000;
		Event Player.invincibility = True;
		Event Player.autoReload = True;
		Event Player.noCD = True;
		Event Player.damageReceived = 50;
		Call Subroutine(update2528Stats);
	}
}

rule("Wave 26: Symmetra 4")
{
	event
	{
		Player Joined Match;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.Wave == 26;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
		Global.Sec >= 30;
	}

	actions
	{
		Global.Enemy[16] = True;
		disabled Event Player.superUlt = True;
	}
}

rule("Wave 26: Bahamut")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave == 26;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Bahamut[0]));
		Wait(5, Ignore Condition);
		Global.Summon[5] = True;
	}
}

rule("Wave 26: Bahamut Reward")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Dead(Victim) == Hero(Symmetra);
		Global.Wave >= 26;
		Global.Enemy[16] == True;
	}

	actions
	{
		Global.Enemy[16] = False;
		Global.Summon[5] = False;
		Global.SummonReward[5] = True;
		Big Message(All Players(All Teams), Custom String("You have proven your strength to {0}", Global.Bahamut[0]));
		Wait(5, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("You can now summon {0} to assist you!!", Global.Bahamut[0]));
	}
}

rule("Wave 27: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 27;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Event Player.healPerSecond = 1000;
		Event Player.healthPercentage = 5000;
		Event Player.invincibility = True;
		Event Player.autoReload = True;
		Event Player.damageReceived = 50;
		Call Subroutine(update2528Stats);
	}
}

rule("Wave 28: Mercy")
{
	event
	{
		Player Joined Match;
		Team 2;
		Mercy;
	}

	conditions
	{
		(Global.Wave == 28 || Global.Wave == 27) == True;
		Is Hero Being Played(Hero(Mercy), Team 2) == True;
		disabled Global.Sec < 5;
	}

	actions
	{
		Event Player.healPerSecond = 1000;
		Event Player.healthPercentage = 10000;
		Event Player.damagePercentage = 10000;
		Event Player.projectileSpeed = 10000;
		Event Player.superUlt = True;
		Event Player.autoReload = True;
		Event Player.flight = True;
		Event Player.noCD = True;
		Event Player.damageReceived = 50;
		Call Subroutine(update2528Stats);
	}
}

rule("Wave 28: Junkrat")
{
	event
	{
		Player Joined Match;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Global.Wave == 28;
		Is Hero Being Played(Hero(Junkrat), Team 2) == True;
	}

	actions
	{
		Event Player.healPerSecond = 1000;
		Event Player.healthPercentage = 10000;
		Event Player.damagePercentage = 10000;
		Event Player.invincibility = True;
		Event Player.autoReload = True;
		Event Player.noCD = True;
		Event Player.damageReceived = 50;
		Call Subroutine(update2528Stats);
	}
}

rule("Wave 28: Roadhog")
{
	event
	{
		Player Joined Match;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Global.Wave == 28;
		Is Hero Being Played(Hero(Roadhog), Team 2) == True;
	}

	actions
	{
		Event Player.healthPercentage = 5000;
		Event Player.projectileSpeed = 10000;
		Event Player.damageReceived = 50;
		Call Subroutine(update2528Stats);
	}
}

rule("Wave 28: Symmetra")
{
	event
	{
		Player Joined Match;
		Team 2;
		Symmetra;
	}

	conditions
	{
		Global.Wave == 28;
		Is Hero Being Played(Hero(Symmetra), Team 2) == True;
	}

	actions
	{
		Event Player.projectileSpeed = 50000;
		Event Player.damageReceived = 50;
		Call Subroutine(update2528Stats);
	}
}

rule("Wave 28 Summons")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Wave >= 28;
	}

	actions
	{
		Global.RandomSummon = Random Integer(0, 5);
		If(Global.RandomSummon == 0);
			Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Ifrit[0]));
			Global.Summon[0] = True;
			Wait(2, Ignore Condition);
			Global.Summon[0] = False;
		End;
		If(Global.RandomSummon == 1);
			Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Shiva[0]));
			Global.Summon[1] = True;
			Wait(2, Ignore Condition);
			Global.Summon[1] = False;
		End;
		If(Global.RandomSummon == 2);
			Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Ramuh[0]));
			Global.Summon[2] = True;
			Wait(2, Ignore Condition);
			Global.Summon[2] = False;
		End;
		If(Global.RandomSummon == 3);
			Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Leviathan[0]));
			Global.Summon[3] = True;
			Wait(2, Ignore Condition);
			Global.Summon[3] = False;
		End;
		If(Global.RandomSummon == 4);
			Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Odin[0]));
			Global.Summon[4] = True;
			Wait(2, Ignore Condition);
			Global.Summon[4] = False;
		End;
		If(Global.RandomSummon == 5);
			Big Message(All Players(All Teams), Custom String("Dr. Junkenstein has summoned {0}", Global.Bahamut[0]));
			Global.Summon[5] = True;
			Wait(2, Ignore Condition);
			Global.Summon[5] = False;
		End;
		Wait(15, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Super Ultimate")
{
	event
	{
		Subroutine;
		Comment;
	}
}

rule("Super Ult Timer")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.ultCooldownTimer[0] -= 1;
		Loop If Condition Is True;
	}
}

disabled rule("Ana Initiate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Event Player.shopNr == 0;
		Event Player.nanoBoosted != True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.nanoBoost = Sorted Array(All Living Players(Team Of(Event Player)), Current Array Element);
		Wait(0.016, Ignore Condition);
		disabled Loop If(Count Of(Event Player.nanoBoost) != Number Of Living Players(Team Of(Event Player)));
		Loop If Condition Is True;
	}
}

disabled rule("Ana Boostees")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		disabled Ultimate Charge Percent(Event Player) == 100;
		Is Using Ultimate(Event Player) == True;
		disabled Event Player.superUlt == True;
		disabled Event Player.ultAbility == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 0);
		Wait(0.016, Ignore Condition);
		Event Player.nanoBoost.nanoBoosted = True;
		Event Player.nanoBoost = Null;
		disabled Abort;
	}
}

disabled rule("Ana Boost")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.nanoBoosted == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Team Of(Event Player), Event Player, 1, Visible To);
		Event Player.effects[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Ana Nano Boosted Sound, Color(White), Event Player, 1, Visible To Position and Radius);
		Event Player.effects[1] = Last Created Entity;
		Set Damage Dealt(Event Player, 150);
		Add Health Pool To Player(Event Player, Armor, 100, True, True);
		Event Player.anaExtraHealth = Last Created Health Pool;
		Set Player Health(Event Player, 2000);
		Wait(8, Ignore Condition);
		Destroy Effect(Event Player.effects[0]);
		Destroy Effect(Event Player.effects[1]);
		Remove Health Pool From Player(Event Player.anaExtraHealth);
		Set Damage Dealt(Event Player, 100);
		Event Player.nanoBoosted = False;
	}
}

rule("Ashe")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Set Ammo(Event Player, 0, 100);
		Set Max Ammo(Event Player, 0, 100);
		Set Damage Received(Event Player, 50);
		Wait(12, Ignore Condition);
		Set Ammo(Event Player, 0, 12);
		Set Max Ammo(Event Player, 0, 12);
		Set Damage Received(Event Player, 100);
	}
}

disabled rule("Baptiste Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Baptiste;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 99999);
		Event Player.bapUlt = True;
		Event Player.ultCooldownTimer[0] = 10;
		disabled Start Heal Over Time(Players Within Radius(Event Player, 10, Team Of(Event Player), Surfaces And Enemy Barriers), Event Player, 10,
			17.500);
		disabled Event Player.bapHeal = Last Heal Over Time ID;
		Create Effect(All Players(All Teams), Sparkles, Color(Sky Blue), Event Player, 10, Visible To Position and Radius);
		Event Player.effects[14] = Last Created Entity;
		Wait Until(Is Dead(Event Player), 10);
		Destroy Effect(Event Player.effects[14]);
		disabled Stop Heal Over Time(Event Player.bapHeal);
		Event Player.bapUlt = False;
	}
}

disabled rule("Baptiste Healing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.bapUlt == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Heal(Players Within Radius(Event Player, 10, Team Of(Event Player), Surfaces And Enemy Barriers), Event Player, 15);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bastion Initiate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
		Event Player.shopNr == 0;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 30;
		disabled Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("Bastion in Shift Form Effects")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
		Event Player.ability1 == True;
		Event Player.ultCooldownTimer[0] > 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		disabled Create Effect(All Players(All Teams), Orb, Color(Green), Update Every Frame(Eye Position(Local Player) + World Vector Of(Vector(5,
			0, -5), Local Player, Rotation) + Facing Direction Of(Local Player) * 10), 1, Visible To Position and Radius);
		disabled Create Effect(All Players(All Teams), Orb, Color(Green), Eye Position(Local Player) + Vector(2, 0, 0), 1,
			Visible To Position and Radius);
		disabled Event Player.effects[11] = Last Created Entity;
		disabled Create Effect(All Players(All Teams), Orb, Color(Green), Update Every Frame(Eye Position(Local Player) + World Vector Of(Vector(-5,
			0, -5), Local Player, Rotation) + Facing Direction Of(Local Player) * 10), 1, Visible To Position and Radius);
		disabled Create Effect(All Players(All Teams), Orb, Color(Green), Eye Position(Local Player) + Vector(-2, 0, 0), 1,
			Visible To Position and Radius);
		disabled Event Player.effects[12] = Last Created Entity;
		Event Player.bastionShift = True;
	}
}

rule("Bastion in Shift Form Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.bastionShift == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
		Event Player.ability1 == True;
	}

	actions
	{
		Create Projectile(Pharah Rocket, Event Player, Update Every Frame(Eye Position(Local Player) + World Vector Of(Vector(5, 0, -5),
			Local Player, Rotation) + Facing Direction Of(Local Player) * 10), Facing Direction Of(Event Player), To World, Damage,
			Opposite Team Of(Team Of(Event Player)), Event Player.damagePercentage * 2, 1, 2, Bad Explosion, Explosion Sound, 0, 25, 5, 0,
			0, 0);
		Create Projectile(Pharah Rocket, Event Player, Update Every Frame(Eye Position(Local Player) + World Vector Of(Vector(5, 0, -5),
			Local Player, Rotation) + Facing Direction Of(Local Player) * 10), Facing Direction Of(Event Player), To World, Damage,
			Opposite Team Of(Team Of(Event Player)), Event Player.damagePercentage * 2, 1, 2, Bad Explosion, Explosion Sound, 0, 25, 5, 0,
			0, 0);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bastion in Shift Form Ends")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		(Event Player.ultCooldownTimer[0] == 0 || Is Using Ability 1(Event Player) == False) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
		Event Player.ability1 == True;
	}

	actions
	{
		Destroy Effect(Event Player.effects[11]);
		Destroy Effect(Event Player.effects[12]);
		Event Player.bastionShift = False;
		disabled Set Ultimate Ability Enabled(Event Player, True);
	}
}

disabled rule("Brigitte Initiate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		disabled Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.shopNr == 0;
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, False);
		Start Scaling Barriers(Event Player, 10, True);
		Create Dummy Bot(Hero(Reinhardt), Team 1, -1, Position Of(Event Player) + Vector(0, 0, 2.500), Facing Direction Of(Event Player));
		Start Forcing Dummy Bot Name(Last Created Entity, Custom String("Leader"));
		Event Player.duplicateRein[0] = Last Created Entity;
		Event Player.duplicateRein[0].duplicateRein[0] = Event Player;
		Event Player.duplicateRein[0].duplicateRein[1] = Event Player.duplicateRein[0];
		Create Dummy Bot(Hero(Reinhardt), Team 1, -1, Position Of(Event Player) + Vector(2, 0, 2.500), Facing Direction Of(Event Player));
		Start Forcing Dummy Bot Name(Last Created Entity, Custom String("Soldier"));
		Event Player.duplicateRein[1] = Last Created Entity;
		Event Player.duplicateRein[1].duplicateRein = Event Player.duplicateRein[0];
		Create Dummy Bot(Hero(Reinhardt), Team 1, -1, Position Of(Event Player) + Vector(5, 0, 0), Facing Direction Of(Event Player));
		Start Forcing Dummy Bot Name(Last Created Entity, Custom String("Soldier"));
		Event Player.duplicateRein[2] = Last Created Entity;
		Event Player.duplicateRein[2].duplicateRein = Event Player.duplicateRein[0];
		Create Dummy Bot(Hero(Reinhardt), Team 1, -1, Position Of(Event Player) + Vector(-2, 0, 2.500), Facing Direction Of(Event Player));
		Start Forcing Dummy Bot Name(Last Created Entity, Custom String("Soldier"));
		Event Player.duplicateRein[3] = Last Created Entity;
		Event Player.duplicateRein[3].duplicateRein = Event Player.duplicateRein[0];
		Create Dummy Bot(Hero(Reinhardt), Team 1, -1, Position Of(Event Player) + Vector(-4, 0, 2.500), Facing Direction Of(Event Player));
		Start Forcing Dummy Bot Name(Last Created Entity, Custom String("Soldier"));
		Event Player.duplicateRein[4] = Last Created Entity;
		Event Player.duplicateRein[4].duplicateRein = Event Player.duplicateRein[0];
		Wait(0.500, Ignore Condition);
		Press Button(Event Player.duplicateRein[0], Button(Ability 1));
		Press Button(Event Player.duplicateRein[1], Button(Ability 1));
		Press Button(Event Player.duplicateRein[2], Button(Ability 1));
		Press Button(Event Player.duplicateRein[3], Button(Ability 1));
		Press Button(Event Player.duplicateRein[4], Button(Ability 1));
		Wait(30, Ignore Condition);
		Destroy Dummy Bot(Team 1, Slot Of(Event Player.duplicateRein[0]));
		Destroy Dummy Bot(Team 1, Slot Of(Event Player.duplicateRein[1]));
		Destroy Dummy Bot(Team 1, Slot Of(Event Player.duplicateRein[2]));
		Destroy Dummy Bot(Team 1, Slot Of(Event Player.duplicateRein[3]));
		Destroy Dummy Bot(Team 1, Slot Of(Event Player.duplicateRein[4]));
		Set Ultimate Ability Enabled(Event Player, True);
		Stop Scaling Barriers(Event Player);
	}
}

disabled rule("Brigitte Reins")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Moving(Event Player) != True;
	}

	actions
	{
		If(Event Player == Event Player.duplicateRein[1]);
			Start Facing(Event Player, Direction Towards(Event Player, Event Player.duplicateRein), 500, To World, Direction and Turn Rate);
			Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.duplicateRein), 10, To World,
				Replace existing throttle, Direction and Magnitude);
			Start Holding Button(Event Player, Button(Secondary Fire));
		Else;
			Start Facing(Event Player, Direction Towards(Event Player, Event Player.duplicateRein), 500, To World, Direction and Turn Rate);
			Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.duplicateRein), 10, To World,
				Replace existing throttle, Direction and Magnitude);
			Start Holding Button(Event Player, Button(Primary Fire));
	}
}

disabled rule("Cassidy")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Set Move Speed(Event Player, 250);
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire)), 7);
		Set Move Speed(Event Player, 100);
	}
}

disabled rule("D.VA deploy mini bombs")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == False;
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.shopNr == 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.dvaPOS = Position Of(Event Player);
		Destroy Effect(Event Player.miniBombs[Event Player.bombIndex]);
		Create Effect(All Players(All Teams), Orb, Color(Red), Nearest Walkable Position(Event Player.dvaPOS), 2, None);
		Event Player.miniBombs[Event Player.bombIndex] = Last Created Entity;
		Event Player.bombsPOS[Event Player.bombIndex] = Nearest Walkable Position(Position Of(Event Player));
		If(Event Player.bombIndex == 4);
			Event Player.bombIndex = 0;
		Else;
			Event Player.bombIndex += 1;
		End;
		Wait(0.016, Ignore Condition);
		Event Player.ultCooldownTimer[0] = 5;
	}
}

disabled rule("D.VA minibomb explodes")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 10;
		Wait(3, Ignore Condition);
		If(Event Player.miniBombs[0] != Null);
			Damage(Players Within Radius(Event Player.bombsPOS[0], 10, Team 2, Surfaces And All Barriers), Event Player, 500);
			Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player.miniBombs[0], 5);
			Destroy Effect(Event Player.miniBombs[0]);
		End;
		If(Event Player.miniBombs[1] != Null);
			Damage(Players Within Radius(Event Player.bombsPOS[1], 10, Team 2, Surfaces And All Barriers), Event Player, 500);
			Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player.miniBombs[1], 5);
			Destroy Effect(Event Player.miniBombs[1]);
		End;
		If(Event Player.miniBombs[2] != Null);
			Damage(Players Within Radius(Event Player.bombsPOS[2], 10, Team 2, Surfaces And All Barriers), Event Player, 500);
			Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player.miniBombs[2], 5);
			Destroy Effect(Event Player.miniBombs[2]);
		End;
		If(Event Player.miniBombs[3] != Null);
			Damage(Players Within Radius(Event Player.bombsPOS[3], 10, Team 2, Surfaces And All Barriers), Event Player, 500);
			Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player.miniBombs[3], 5);
			Destroy Effect(Event Player.miniBombs[3]);
		End;
		If(Event Player.miniBombs[4] != Null);
			Damage(Players Within Radius(Event Player.bombsPOS[4], 10, Team 2, Surfaces And All Barriers), Event Player, 500);
			Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player.miniBombs[4], 5);
			Destroy Effect(Event Player.miniBombs[4]);
		End;
		Event Player.bombIndex = 0;
		Event Player.ultCooldownTimer[0] = 5;
	}
}

disabled rule("D.VA little bombs")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.superUlt == True;
	}

	actions
	{
		Wait(1.500, Abort When False);
		Create Effect(All Players(All Teams), Orb, Color(Red), Position Of(Event Player) + Vector(0, 2, 0), 2,
			Visible To Position and Radius);
		Event Player.effects[4] = Last Created Entity;
		Wait(0.500, Ignore Condition);
		Create Projectile(Mercy Caduceus Blaster, Event Player, Position Of(Event Player.effects[4]), Facing Direction Of(Event Player),
			To World, Damage, Team 2, 100, 10, 10, Bad Explosion, Ashe Dynamite Explosion Sound, 0.500, 10, 4, 10, 0, 0);
		Destroy Effect(Event Player.effects[4]);
	}
}

disabled rule("Doomfist Initiate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.doomUlt = True;
	}
}

disabled rule("Doomfist Blocking")
{
	event
	{
		Player Took Damage;
		All;
		Doomfist;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.doomUlt == True;
	}

	actions
	{
		Event Player.doomDMG += Event Damage;
		Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Cloud, Color(Red), Event Player, Event Player.doomDMG / 10,
			Visible To Position and Radius);
		Event Player.effects[17] = Last Created Entity;
	}
}

disabled rule("Doomfist One Punch")
{
	event
	{
		Player Dealt Damage;
		All;
		Doomfist;
	}

	conditions
	{
		Event Player.doomUlt == True;
		Is Firing Secondary(Event Player) == True;
		Event Player.doomDMG > 0;
	}

	actions
	{
		Damage(Victim, Event Player, Event Player.doomDMG * 10);
		Destroy Effect(Event Player.effects[17]);
		Wait(0.100, Ignore Condition);
		Event Player.doomUlt = False;
		Event Player.doomDMG = 0;
	}
}

disabled rule("Echo Super Ult Timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.echoUltTimer > 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.echoUltTimer -= 1;
		Loop If Condition Is True;
	}
}

disabled rule("Echo Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Duplicating(Event Player) == True;
		Event Player.echoUlt == False;
	}

	actions
	{
		Event Player.echoUltTimer = 15;
		Event Player.echoUlt = True;
		Start Forcing Player To Be Hero(Event Player, Hero Being Duplicated(Event Player));
		Set Ultimate Charge(Event Player, 100);
	}
}

disabled rule("Echo Change Form")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.echoUlt == True;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Custom String("Ult Remaining Time: {0}", Event Player.echoUltTimer), Null, Null, Top, 0, Color(
			White), Color(White), Color(Black), Visible To and String, Default Visibility);
		Set Ultimate Charge(Event Player, 90);
	}
}

disabled rule("Echo Died While Ulting")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dead(Event Player) == True;
		Event Player.echoUlt == True;
	}

	actions
	{
		Resurrect(Event Player);
		Event Player.echoUltTimer = 0;
	}
}

disabled rule("Echo Ult End")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.echoUlt == True;
		Event Player.echoUltTimer == 0;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Echo));
		Set Status(Event Player, Null, Unkillable, 0.500);
		Destroy HUD Text(Last Text ID);
		Wait(0.016, Ignore Condition);
		Stop Forcing Player To Be Hero(Event Player);
		Event Player.echoUlt = False;
	}
}

disabled rule("Genji Initiate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.ultCooldownTimer[0] = 6;
		Event Player.ultCooldownTimer[1] = True;
	}
}

disabled rule("Genji Ult Deal Damage")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Genji;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.ultDmg += Event Damage;
	}
}

disabled rule("Genji Ult Final Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.ultCooldownTimer[1] == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 5, Team 2, Surfaces), Event Player, Event Player.ultDmg * 2);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Lime Green), Event Player, 5);
		Event Player.ultCooldownTimer[1] = False;
	}
}

disabled rule("Hanzo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Wait(0.910, Ignore Condition);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(15, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(30, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(45, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(60, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(75, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(90, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(105, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(120, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(135, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(150, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(165, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(180, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(195, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(210, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(225, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(240, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(255, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(270, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(285, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(300, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(315, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(330, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
		Create Projectile(Orisa Fusion Driver, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player)
			+ Direction From Angles(345, 0), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 0, Bad Explosion,
			Explosion Sound, 0, 10, 10, 0, 5, 0);
	}
}

rule("Illari Initiate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Illari;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 5);
		Event Player.ultCooldownTimer[0] = 10;
		Event Player.megiddo[0] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 100, All Players(Team 2), Event Player, True);
		Event Player.megiddo[2] = Players Within Radius(Event Player.megiddo[0], 8, Team 2, Off);
		Event Player.megiddo[2].megiddo[0] = Event Player.megiddo[0];
		Event Player.megiddo[2].megiddo[1] = True;
		Event Player.megiddo[5] = 1;
		Set Ability 1 Enabled(Event Player.megiddo[2], False);
		Set Ability 2 Enabled(Event Player.megiddo[2], False);
		Set Ultimate Ability Enabled(Event Player.megiddo[2], False);
	}
}

rule("Illari Megiddo Effects")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Illari;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		disabled Teleport(Event Player, Event Player.megiddo[0] + Vector(0, 12.500, 0));
		Create Effect(All Players(All Teams), Sphere, Color(Team 1), Event Player.megiddo[0] - Vector(0, 0, 0), 8,
			Visible To Position and Radius);
		Event Player.megiddoEffects[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Cloud, Color(Rose), Event Player.megiddo[0] + Vector(0, 10, 0), 10,
			Visible To Position and Radius);
		Event Player.megiddoEffects[1] = Last Created Entity;
		Create Effect(All Players(All Teams), Cloud, Color(Team 1), Event Player.megiddo[0] + Vector(0, 15, 0), 1,
			Visible To Position and Radius);
		Event Player.megiddoEffects[2] = Last Created Entity;
		Create Effect(All Players(All Teams), Cloud, Color(Team 1), Event Player.megiddo[0] + Vector(4, 15, 0), 1,
			Visible To Position and Radius);
		Event Player.megiddoEffects[3] = Last Created Entity;
		Create Effect(All Players(All Teams), Cloud, Color(Team 1), Event Player.megiddo[0] + Vector(-4, 15, 0), 1,
			Visible To Position and Radius);
		Event Player.megiddoEffects[4] = Last Created Entity;
		Create Effect(All Players(All Teams), Cloud, Color(Team 1), Event Player.megiddo[0] + Vector(0, 15, 4), 1,
			Visible To Position and Radius);
		Event Player.megiddoEffects[5] = Last Created Entity;
		Create Effect(All Players(All Teams), Cloud, Color(Team 1), Event Player.megiddo[0] + Vector(0, 15, -4), 1,
			Visible To Position and Radius);
		Event Player.megiddoEffects[6] = Last Created Entity;
		Wait(1, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("{0}: Megiddo", Event Player));
		Wait(1, Ignore Condition);
		Event Player.megiddo[3] = True;
	}
}

rule("Illari Megiddo Trap Enemies")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Event Player.megiddo[0]) > 8;
		Event Player.megiddo[1] == True;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Event Player, Event Player.megiddo[0]), Distance Between(Event Player.megiddo[0],
			Event Player) * 0.500, To World, Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Illari Megiddo Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Illari;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.megiddo[3] == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.megiddo[4] = Random Integer(0, 4);
		If(Count Of(Event Player.megiddo[2]) > 0);
			If(Event Player.megiddo[4] == 0);
				Create Homing Projectile(Mei Icicle, Event Player, Event Player.megiddo[0] + Vector(0, 15, 0), Null, To World, Damage, All Teams,
					Count Of(Event Player.megiddo[2]) * Event Player.damagePercentage, 10, 0, Bad Explosion, Explosion Sound, 0, 20, 2, 0,
					Random Value In Array(Event Player.megiddo[2]), 1);
			End;
			If(Event Player.megiddo[4] == 1);
				Create Homing Projectile(Mei Icicle, Event Player, Event Player.megiddo[0] + Vector(0, 15, 0), Null, To World, Damage, All Teams,
					Count Of(Event Player.megiddo[2]) * Event Player.damagePercentage, 10, 0, Bad Explosion, Explosion Sound, 0, 20, 2, 0,
					Random Value In Array(Event Player.megiddo[2]), 1);
			End;
			If(Event Player.megiddo[4] == 2);
				Create Homing Projectile(Mei Icicle, Event Player, Event Player.megiddo[0] + Vector(0, 15, 0), Null, To World, Damage, All Teams,
					Count Of(Event Player.megiddo[2]) * Event Player.damagePercentage, 10, 0, Bad Explosion, Explosion Sound, 0, 20, 2, 0,
					Random Value In Array(Event Player.megiddo[2]), 1);
			End;
			If(Event Player.megiddo[4] == 3);
				Create Homing Projectile(Mei Icicle, Event Player, Event Player.megiddo[0] + Vector(0, 15, 0), Null, To World, Damage, All Teams,
					Count Of(Event Player.megiddo[2]) * Event Player.damagePercentage, 10, 0, Bad Explosion, Explosion Sound, 0, 20, 2, 0,
					Random Value In Array(Event Player.megiddo[2]), 1);
			End;
			If(Event Player.megiddo[4] == 4);
				Create Homing Projectile(Mei Icicle, Event Player, Event Player.megiddo[0] + Vector(0, 15, 0), Null, To World, Damage, All Teams,
					Count Of(Event Player.megiddo[2]) * Event Player.damagePercentage, 10, 0, Bad Explosion, Explosion Sound, 0, 20, 2, 0,
					Random Value In Array(Event Player.megiddo[2]), 1);
			End;
		Else;
			If(Event Player.megiddo[4] == 0);
				Create Projectile(Mei Icicle, Event Player, Event Player.megiddo[0] + Vector(0, 15, 0), Down, To World, Damage, Team 2,
					Event Player.damagePercentage, 10, 5, Bad Explosion, Explosion Sound, 0, 20, 2, 0, 0, 0);
			End;
			If(Event Player.megiddo[4] == 1);
				Create Projectile(Mei Icicle, Event Player, Event Player.megiddo[0] + Vector(4, 15, 0), Down, To World, Damage, Team 2,
					Event Player.damagePercentage, 10, 5, Bad Explosion, Explosion Sound, 0, 20, 2, 0, 0, 0);
			End;
			If(Event Player.megiddo[4] == 2);
				Create Projectile(Mei Icicle, Event Player, Event Player.megiddo[0] + Vector(-4, 15, 0), Down, To World, Damage, Team 2,
					Event Player.damagePercentage, 10, 5, Bad Explosion, Explosion Sound, 0, 20, 2, 0, 0, 0);
			End;
			If(Event Player.megiddo[4] == 3);
				Create Projectile(Mei Icicle, Event Player, Event Player.megiddo[0] + Vector(0, 15, 4), Down, To World, Damage, Team 2,
					Event Player.damagePercentage, 10, 5, Bad Explosion, Explosion Sound, 0, 20, 2, 0, 0, 0);
			End;
			If(Event Player.megiddo[4] == 4);
				Create Projectile(Mei Icicle, Event Player, Event Player.megiddo[0] + Vector(0, 15, -4), Down, To World, Damage, Team 2,
					Event Player.damagePercentage, 10, 5, Bad Explosion, Explosion Sound, 0, 20, 2, 0, 0, 0);
			End;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Illari Megiddo Killed Enemy")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		Illari;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Modify Player Variable At Index(Event Player, megiddo, 2, Remove From Array By Value, Victim);
		Event Player.megiddo[5] += 1;
	}
}

rule("Illari Megiddo Ends")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Illari;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.megiddoEffects = Empty Array;
		Destroy Effect(Event Player.megiddoEffects[0]);
		Destroy Effect(Event Player.megiddoEffects[1]);
		Destroy Effect(Event Player.megiddoEffects[2]);
		Destroy Effect(Event Player.megiddoEffects[3]);
		Destroy Effect(Event Player.megiddoEffects[4]);
		Destroy Effect(Event Player.megiddoEffects[5]);
		Destroy Effect(Event Player.megiddoEffects[6]);
		Event Player.megiddo[1] = False;
		Event Player.megiddo[2].megiddo[1] = False;
		Set Ability 1 Enabled(Event Player.megiddo[2], True);
		Set Ability 2 Enabled(Event Player.megiddo[2], True);
		Set Ultimate Ability Enabled(Event Player.megiddo[2], True);
		Event Player.megiddo[2] = Empty Array;
		Event Player.megiddo[3] = False;
		Event Player.megiddo[5] = 1;
	}
}

disabled rule("Junker Queen Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junker Queen;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Wait(0.736, Ignore Condition);
		Event Player.ultCooldownTimer[0] = 1;
	}
}

disabled rule("Junker Queen Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Junker Queen;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Victim.JQBeingHit != True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		disabled Event Player.JQHitMaxHP = Max Health(Victim);
		disabled Event Player.JQHitHP = Health(Victim);
		disabled Event Player.JQHit = True;
		disabled Event Player.JQHitPerson = Victim;
		Victim.JQBeingHit = True;
		Event Player.test[0] = Max Health(Event Player);
		Event Player.test[1] = Health(Event Player);
		Event Player.test[2] = Max Health(Victim);
		Event Player.test[3] = Health(Victim);
		Event Player.test[4] = Player Stat(Event Player, Hero Damage Dealt);
		Event Player.test[5] = Player Stat(Event Player, Damage Taken);
		Event Player.test[6] = Player Stat(Event Player, Weapon Accuracy);
		Event Player.JQHitHP[0] = Max Health(Event Player) - Health(Event Player);
		Event Player.JQHitHP[1] = Max Health(Victim) - Health(Victim);
		Event Player.JQHitHP[2] = (Max Health(Event Player) - Health(Event Player)) / (Max Health(Victim) - Health(Victim));
		Event Player.JQHitHP[3] = Player Stat(Event Player, Hero Damage Dealt) / Player Stat(Event Player, Damage Taken);
		Event Player.JQHitHP[4] = (Max Health(Event Player) - Health(Event Player)) / (Max Health(Victim) - Health(Victim)) * (Player Stat(
			Event Player, Hero Damage Dealt) / Player Stat(Event Player, Damage Taken));
		Damage(Victim, Event Player, (Max Health(Event Player) - Health(Event Player)) / (Max Health(Victim) - Health(Victim)) * (
			Player Stat(Event Player, Hero Damage Dealt) * Player Stat(Event Player, Weapon Accuracy) * 10 / Player Stat(Event Player,
			Damage Taken)));
		Wait(1, Ignore Condition);
		Victim.JQBeingHit = False;
	}
}

disabled rule("Junkrat")
{
	event
	{
		Ongoing - Each Player;
		All;
		Junkrat;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Set Gravity(Event Player, 50);
		Set Move Speed(Event Player, 200);
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire)), 12);
		Set Gravity(Event Player, 100);
		Set Move Speed(Event Player, 100);
	}
}

disabled rule("Juno Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Juno;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Omnic Slicer Beam, Position Of(Event Player), Position Of(Event Player) + Vector(0,
			5000, 0), Color(White), Visible To Position and Radius);
		Event Player.effects[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Sparkles, Color(Turquoise), Position Of(Event Player), 10, Visible To Position and Radius);
		Event Player.effects[1] = Last Created Entity;
		Respawn(All Dead Players(Team Of(Event Player)));
		Event Player.ultCooldownTimer[0] = 10;
		Wait(10, Ignore Condition);
		Destroy Effect(Event Player.effects[0]);
		Destroy Effect(Event Player.effects[1]);
	}
}

disabled rule("Juno Beam")
{
	event
	{
		Ongoing - Each Player;
		All;
		Juno;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
	}

	actions
	{
		Heal(Players Within Radius(Position Of(Event Player), 20, Team Of(Event Player), Off), Event Player, 100);
		Damage(Players Within Radius(Position Of(Event Player), 10, Opposite Team Of(Team Of(Event Player)), Off), Event Player, 10);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Kiriko Initiate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Kiriko;
	}

	conditions
	{
		disabled Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.ultCooldownTimer[0] == 0;
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Cloud, Color(Turquoise), Update Every Frame(Event Player), 5,
			Visible To Position Radius and Color);
		Event Player.effects[2] = Last Created Entity;
		Event Player.ultCooldownTimer[0] = 10;
	}
}

disabled rule("Kiriko Attack Beam 1")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.ultCooldownTimer[1] == 0;
		Event Player.ultCooldownTimer[2] == 0;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[1] = 0.500;
		Create Homing Projectile(Mei Icicle, Event Player, Event Player + Vector(0, 2, 0), Null, To World, Damage, Team 2,
			Event Player.damagePercentage * (45 / 200), 1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, Victim, 1);
		Wait(0.500, Ignore Condition);
		Event Player.ultCooldownTimer[1] = 0;
		Event Player.ultCooldownTimer[2] = 1;
	}
}

disabled rule("Kiriko Attack Beam 2")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.ultCooldownTimer[1] == 0;
		Event Player.ultCooldownTimer[2] == 1;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[1] = 0.500;
		Create Homing Projectile(Mei Icicle, Event Player, Event Player + Vector(0.500, 2, 0), Null, To World, Damage, Team 2,
			Event Player.damagePercentage * (45 / 200), 1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, Victim, 1);
		Create Homing Projectile(Mei Icicle, Event Player, Event Player + (Vector(0, 2, 0) - Vector(0.500, 0, 0)), Null, To World, Damage,
			Team 2, Event Player.damagePercentage * (45 / 200), 1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, Victim, 1);
		Wait(0.500, Ignore Condition);
		Event Player.ultCooldownTimer[1] = 0;
		Event Player.ultCooldownTimer[2] = 2;
	}
}

disabled rule("Kiriko Attack Beam 3")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.ultCooldownTimer[1] == 0;
		Event Player.ultCooldownTimer[2] == 2;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[1] = 0.500;
		Create Homing Projectile(Mei Icicle, Event Player, Event Player + Vector(0, 2, 0), Null, To World, Damage, Team 2,
			Event Player.damagePercentage * (45 / 200), 1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, Victim, 1);
		Create Homing Projectile(Mei Icicle, Event Player, Event Player + Vector(1, 2, 0), Null, To World, Damage, Team 2,
			Event Player.damagePercentage * (45 / 200), 1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, Victim, 1);
		Create Homing Projectile(Mei Icicle, Event Player, Event Player + (Vector(0, 2, 0) - Vector(1, 0, 0)), Null, To World, Damage,
			Team 2, Event Player.damagePercentage * (45 / 200), 1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, Victim, 1);
		Wait(0.500, Ignore Condition);
		Event Player.ultCooldownTimer[1] = 0;
		Event Player.ultCooldownTimer[2] = 0;
	}
}

disabled rule("Kiriko Healing Beam")
{
	event
	{
		Player Dealt Healing;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.ultCooldownTimer[3] == 0;
	}

	actions
	{
		Event Player.ultCooldownTimer[3] = 0.500;
		Create Homing Projectile(Orb Projectile, Event Player, Event Player + Vector(2, 0, 0), Ray Cast Hit Normal(Event Player, Null,
			All Players(Team 1), Event Player, True), To World, Heal, Team 1, Event Healing / 2, 1, 5,
			Baptiste Biotic Launcher Explosion Effect, Baptiste Biotic Launcher Explosion Sound, 0, 10, 5, 0, Healee, 1);
		Create Homing Projectile(Orb Projectile, Event Player, Event Player + Vector(-2, 0, 0), Ray Cast Hit Normal(Event Player, Null,
			All Players(Team 1), Event Player, True), To World, Heal, Team 1, Event Healing / 2, 1, 5,
			Baptiste Biotic Launcher Explosion Effect, Baptiste Biotic Launcher Explosion Sound, 0, 10, 5, 0, Healee, 1);
		Wait(0.500, Ignore Condition);
		Event Player.ultCooldownTimer[3] = 0;
	}
}

disabled rule("Kiriko End")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Destroy Effect(Event Player.effects[2]);
		Event Player.ultCooldownTimer[1] = 0;
		Event Player.ultCooldownTimer[2] = 0;
	}
}

disabled rule("Lifeweaver Initiate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lifeweaver;
	}

	conditions
	{
		Event Player.shopNr == 0;
		Event Player.superUlt == True;
	}

	actions
	{
		Event Player.LWdisappear = Filtered Array(All Living Players(Team 1), Event Player.shopNr == 0);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Lifeweaver Disappear")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lifeweaver;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)) == True);
			Wait(1, Ignore Condition);
			Big Message(All Players(All Teams), Custom String("{0}: Let the world completely forget me", Event Player));
			Set Status(Event Player, Null, Unkillable, 15);
			Set Status(Event Player, Null, Rooted, 15);
			Set Primary Fire Enabled(Event Player, False);
			Set Secondary Fire Enabled(Event Player, False);
			Set Jump Enabled(Event Player, False);
			Set Ability 1 Enabled(Event Player, False);
			Set Ability 2 Enabled(Event Player, False);
			Set Ultimate Ability Enabled(Event Player, False);
			Set Invisible(Event Player, All);
			Event Player.LWdisappear.forgotten = True;
			Event Player.LWdisappear = Empty Array;
			Event Player.effects[3] = Last Created Entity;
			Wait(15, Ignore Condition);
			Set Invisible(Event Player, None);
			Set Primary Fire Enabled(Event Player, True);
			Set Secondary Fire Enabled(Event Player, True);
			Set Jump Enabled(Event Player, True);
			Set Ability 1 Enabled(Event Player, True);
			Set Ability 2 Enabled(Event Player, True);
			Set Ultimate Ability Enabled(Event Player, True);
			disabled Destroy Effect(Event Player.effects[3]);
		Else;
			Wait(0.016, Ignore Condition);
			Loop;
	}
}

disabled rule("Lifeweaver forgotten")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.forgotten == True;
	}

	actions
	{
		Set Status(Event Player, Null, Unkillable, 15);
		Create Effect(All Players(All Teams), Lúcio Sound Barrier Protected Effect, Color(Rose), Event Player, 1,
			Visible To Position and Radius);
		Event Player.effects[3] = Last Created Entity;
		Wait(15, Ignore Condition);
		Destroy Effect(Event Player.effects[3]);
	}
}

disabled rule("Lucio")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lúcio;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Set Healing Dealt(Event Player, 300);
		Add Health Pool To Player(All Living Players(Team Of(Event Player)), Shields, 500, True, True);
		Event Player.lucioHP = Last Created Health Pool;
		Wait(10, Ignore Condition);
		Remove Health Pool From Player(Event Player.lucioHP);
		Set Healing Dealt(Event Player, 100);
	}
}

disabled rule("Mauga Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mauga;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 8;
		Set Status(Players Within Radius(Event Player, 7, Opposite Team Of(Team Of(Event Player)), Off), Null, Burning, 8);
	}
}

disabled rule("Mauga End Ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mauga;
	}

	conditions
	{
		disabled Event Player.ultCooldownTimer[0] > 0;
		disabled Is Button Held(Event Player, Button(Ultimate)) == True;
		(Event Player.ultCooldownTimer[0] == 0 || Is Dead(Event Player) || (Event Player.ultCooldownTimer[0] == 0 && Is Button Held(
			Event Player, Button(Ultimate)))) == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 0;
		Clear Status(Players Within Radius(Event Player, 7, Opposite Team Of(Team Of(Event Player)), Off), Burning);
	}
}

disabled rule("Mei Ganyu Ball")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		disabled Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.ultCooldownTimer[0] == 0;
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 15;
		Event Player.ganyuBallPOS = Position Of(Event Player);
		Wait(0.500, Ignore Condition);
		Create Effect(All Players(All Teams), Orb, Color(Sky Blue), Event Player.ganyuBallPOS + Vector(0, 5, 0), 5,
			Visible To Position and Radius);
		Event Player.effects[7] = Last Created Entity;
		Create Effect(All Players(All Teams), Ring, Color(Sky Blue), Event Player.ganyuBallPOS, 10, Visible To Position and Radius);
		Event Player.effects[8] = Last Created Entity;
		Event Player.meiUlt = True;
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

disabled rule("Mei Ganyu Icicles")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		Event Player.meiUlt == True;
	}

	actions
	{
		Create Projectile(Mei Icicle, Event Player, Event Player.ganyuBallPOS + Vector(Random Integer(-8, 8), 7.500, Random Integer(-8,
			8)), Down, To World, Damage, Team 2, 100, 1, 2, Bad Explosion, Explosion Sound, 0, 10, 2, 0, 0, 0);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Mei Ganyu End")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Destroy Effect(Event Player.effects[7]);
		Destroy Effect(Event Player.effects[8]);
		Event Player.meiUlt = False;
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

disabled rule("Mercy Initiate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
		Event Player.mercyUlt == False;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 15;
		Resurrect(All Dead Players(Team 1));
		Set Facing(All Living Players(Team 2), Event Player, To World);
		Create Effect(All Players(All Teams), Orb, Color(White), Position Of(Event Player) + Left, 1, Visible To Position and Radius);
		Event Player.effects[9] = Last Created Entity;
		Create Effect(All Players(All Teams), Orb, Color(White), Position Of(Event Player) + Right, 1, Visible To Position and Radius);
		Event Player.effects[10] = Last Created Entity;
		Event Player.mercyUlt = True;
	}
}

disabled rule("Mercy Healing")
{
	event
	{
		Player Dealt Healing;
		Team 1;
		Mercy;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
	}

	actions
	{
		If(Health(Event Player) - (Max Health(Healee) - Health(Healee)) < 1);
			Set Player Health(Event Player, 1);
		Else;
			Damage(Event Player, Null, Max Health(Healee) - Health(Healee));
		End;
		Heal(Healee, Healer, Max Health(Healee) - Health(Healee));
	}
}

disabled rule("Mercy Downward Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
	}

	actions
	{
		Create Projectile(Orisa Fusion Driver, Event Player, Position Of(Event Player), Direction From Angles(Random Integer(0, 360),
			Random Integer(60, 120)), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 2, Bad Explosion, Explosion Sound,
			0, 10, 2, 0, 0, 0);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Mercy Homing Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
	}

	actions
	{
		Create Homing Projectile(Mercy Caduceus Blaster, Event Player, Eye Position(Event Player) + Left, Facing Direction Of(
			Event Player), To World, Damage, Team 2, 20, 1, 0, Bad Explosion, Explosion Sound, 0, 10, 2, 0, Closest Player To(Position Of(
			Event Player), Team 2), 1);
		Create Homing Projectile(Mercy Caduceus Blaster, Event Player, Eye Position(Event Player) + Right, Facing Direction Of(
			Event Player), To World, Damage, Team 2, 20, 1, 0, Bad Explosion, Explosion Sound, 0, 10, 2, 0, Closest Player To(Position Of(
			Event Player), Team 2), 1);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Mercy Ult Ends")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
		Event Player.mercyUlt == True;
	}

	actions
	{
		Destroy Effect(Event Player.effects[9]);
		Destroy Effect(Event Player.effects[10]);
		Stop Facing(All Living Players(Team 2));
		Event Player.mercyUlt = False;
	}
}

disabled rule("Moria")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Create Projectile(Moira Damage Orb, Event Player, Null, Forward, To World, Damage, Team 2, Event Player.damagePercentage * 0.050,
			1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Damage Orb, Event Player, Null, Vector(0.500, 0, 0.500), To World, Damage, Team 2,
			Event Player.damagePercentage * 0.050, 1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Damage Orb, Event Player, Null, Left, To World, Damage, Team 2, Event Player.damagePercentage * 0.050, 1,
			0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Damage Orb, Event Player, Null, Vector(0.500, 0, -0.500), To World, Damage, Team 2,
			Event Player.damagePercentage * 0.050, 1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Damage Orb, Event Player, Null, Backward, To World, Damage, Team 2, Event Player.damagePercentage * 0.050,
			1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Damage Orb, Event Player, Null, Vector(-0.500, 0, -0.500), To World, Damage, Team 2,
			Event Player.damagePercentage * 0.050, 1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Damage Orb, Event Player, Null, Right, To World, Damage, Team 2, Event Player.damagePercentage * 0.050, 1,
			0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Damage Orb, Event Player, Null, Vector(0.500, 0, -0.500), To World, Damage, Team 2,
			Event Player.damagePercentage * 0.050, 1, 0, Bad Explosion, Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Heal Orb, Event Player, Null, Forward, To World, Heal, Team 1, 65, 1, 0, Bad Explosion, Explosion Sound, 0,
			5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Heal Orb, Event Player, Null, Vector(0.500, 0, 0.500), To World, Heal, Team 1, 65, 1, 0, Bad Explosion,
			Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Heal Orb, Event Player, Null, Left, To World, Heal, Team 1, 65, 1, 0, Bad Explosion, Explosion Sound, 0, 5,
			5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Heal Orb, Event Player, Null, Vector(0.500, 0, -0.500), To World, Heal, Team 1, 65, 1, 0, Bad Explosion,
			Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Heal Orb, Event Player, Null, Backward, To World, Heal, Team 1, 65, 1, 0, Bad Explosion, Explosion Sound,
			0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Heal Orb, Event Player, Null, Vector(-0.500, 0, -0.500), To World, Heal, Team 1, 65, 1, 0, Bad Explosion,
			Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Heal Orb, Event Player, Null, Right, To World, Heal, Team 1, 65, 1, 0, Bad Explosion, Explosion Sound, 0,
			5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Create Projectile(Moira Heal Orb, Event Player, Null, Vector(0.500, 0, -0.500), To World, Heal, Team 1, 65, 1, 0, Bad Explosion,
			Explosion Sound, 0, 5, 5, 0, 10, 0);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Orisa Summon Meteor")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		disabled Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Wait(0.750, Ignore Condition);
		Event Player.meteorPOS = Vector(0, 25, 0) + Position Of(Event Player);
		Create Effect(All Players(All Teams), Sphere, Color(Orange), Event Player.meteorPOS, 15, Visible To Position and Radius);
		Event Player.effects[5] = Last Created Entity;
		Wait Until(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire)), 3.250);
		Chase Player Variable Over Time(Event Player, meteorPOS, Position Of(Event Player), 1, Destination and Duration);
		Wait(1, Ignore Condition);
		Damage(Players Within Radius(Event Player.meteorPOS, 15, Team 2, Off), Event Player,
			Event Player.healthPercentage / Event Player.damageReceived);
		Set Status(Players Within Radius(Event Player.meteorPOS, 15, Team 2, Off), Null, Knocked Down, 4);
		Stop Chasing Player Variable(Event Player, meteorPOS);
		Event Player.meteorPOS = Null;
		Destroy Effect(Event Player.effects[5]);
	}
}

disabled rule("Orisa Dead While Ulting")
{
	event
	{
		Player Died;
		All;
		Orisa;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, meteorPOS);
		Event Player.meteorPOS = Null;
		Destroy Effect(Event Player.effects[5]);
	}
}

disabled rule("Pharah Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		disabled Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Vector(0, 1, 0) + Position Of(Event Player),
			Facing Direction Of(Event Player) * 100, Team Of(Event Player), Visible To Position and Radius);
		disabled Event Player.effects[13] = Last Created Entity;
		Event Player.ultCooldownTimer[0] = 2;
	}
}

disabled rule("Pharah Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Create Projectile(Pharah Rocket, Event Player, Position Of(Event Player) + World Vector Of(Vector(0, 0, 0), Event Player,
			Rotation), Facing Direction Of(Event Player), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 2,
			Bad Explosion, DVa Micro Missiles Explosion Sound, 0, 50, 5, 0, 0, 0);
		Create Projectile(Pharah Rocket, Event Player, Position Of(Event Player) + World Vector Of(Vector(1, 0, 0), Event Player,
			Rotation), Facing Direction Of(Event Player), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 2,
			Bad Explosion, DVa Micro Missiles Explosion Sound, 0, 50, 5, 0, 0, 0);
		Create Projectile(Pharah Rocket, Event Player, Position Of(Event Player) + World Vector Of(Vector(-1, 0, 0), Event Player,
			Rotation), Facing Direction Of(Event Player), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 2,
			Bad Explosion, DVa Micro Missiles Explosion Sound, 0, 50, 5, 0, 0, 0);
		Create Projectile(Pharah Rocket, Event Player, Position Of(Event Player) + World Vector Of(Vector(0, 1, 0), Event Player,
			Rotation), Facing Direction Of(Event Player), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 2,
			Bad Explosion, DVa Micro Missiles Explosion Sound, 0, 50, 5, 0, 0, 0);
		Create Projectile(Pharah Rocket, Event Player, Position Of(Event Player) + World Vector Of(Vector(1, 1, 0), Event Player,
			Rotation), Facing Direction Of(Event Player), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 2,
			Bad Explosion, DVa Micro Missiles Explosion Sound, 0, 50, 5, 0, 0, 0);
		Create Projectile(Pharah Rocket, Event Player, Position Of(Event Player) + World Vector Of(Vector(-1, 1, 0), Event Player,
			Rotation), Facing Direction Of(Event Player), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 2,
			Bad Explosion, DVa Micro Missiles Explosion Sound, 0, 50, 5, 0, 0, 0);
		Create Projectile(Pharah Rocket, Event Player, Position Of(Event Player) + World Vector Of(Vector(0, 2, 0), Event Player,
			Rotation), Facing Direction Of(Event Player), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 2,
			Bad Explosion, DVa Micro Missiles Explosion Sound, 0, 50, 5, 0, 0, 0);
		Create Projectile(Pharah Rocket, Event Player, Position Of(Event Player) + World Vector Of(Vector(1, 2, 0), Event Player,
			Rotation), Facing Direction Of(Event Player), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 2,
			Bad Explosion, DVa Micro Missiles Explosion Sound, 0, 50, 5, 0, 0, 0);
		Create Projectile(Pharah Rocket, Event Player, Position Of(Event Player) + World Vector Of(Vector(-1, 2, 0), Event Player,
			Rotation), Facing Direction Of(Event Player), To World, Damage, Opposite Team Of(Team Of(Event Player)), 10, 1, 2,
			Bad Explosion, DVa Micro Missiles Explosion Sound, 0, 50, 5, 0, 0, 0);
		disabled Damage(Ray Cast Hit Player(Vector(0, 1, 0) + Position Of(Event Player), Facing Direction Of(Event Player) * 100, All Players(
			Opposite Team Of(Team Of(Event Player))), Event Player, True), Event Player, 50);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Pharah End")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		(Event Player.ultCooldownTimer[0] == 0 || Is Dead(Event Player)) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Destroy Effect(Event Player.effects[13]);
		Event Player.ultCooldownTimer[0] = 0;
	}
}

disabled rule("Ramattra Initiate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ramattra;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Teleport(Players Within Radius(Event Player, 25, Opposite Team Of(Team Of(Event Player)), Surfaces), Position Of(Event Player));
	}
}

disabled rule("Ramattra Heal Teammates")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Ramattra;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Heal(Players Within Radius(Position Of(Event Player), 13, Team 1, Off), Event Player, Event Damage);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Reaper Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Reaper), Team Of(Event Player), -1, Position Of(Event Player), Event Player);
		Event Player.duplicateReaper[0] = Last Created Entity;
		Event Player.duplicateReaper[0].duplicateReaper = Event Player;
		Create Dummy Bot(Hero(Reaper), Team Of(Event Player), -1, Position Of(Event Player), Event Player);
		Event Player.duplicateReaper[1] = Last Created Entity;
		Event Player.duplicateReaper[1].duplicateReaper = Event Player;
		Set Damage Dealt(Event Player.duplicateReaper[0], 50);
		Set Damage Dealt(Event Player.duplicateReaper[1], 50);
		Set Ultimate Charge(Event Player.duplicateReaper[0], 100);
		Set Ultimate Charge(Event Player.duplicateReaper[1], 100);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player.duplicateReaper[0], Button(Ultimate));
		Press Button(Event Player.duplicateReaper[1], Button(Ultimate));
		Wait(3, Ignore Condition);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player.duplicateReaper[0]));
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player.duplicateReaper[1]));
	}
}

disabled rule("Reaper Duplicates")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		disabled Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Wait(0.016, Ignore Condition);
		Press Button(Event Player, Button(Ultimate));
		Start Facing(Event Player, Direction Towards(Event Player, Event Player.duplicateReaper), 500, To World, Direction and Turn Rate);
		Start Throttle In Direction(Event Player, Direction Towards(Event Player, Event Player.duplicateReaper), 10, To World,
			Replace existing throttle, Direction and Magnitude);
	}
}

disabled rule("Reinhardt Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 5;
	}
}

disabled rule("Rein Infinite E")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Create Homing Projectile(Reinhardt Fire Strike, Event Player, Eye Position(Event Player) + Left, Facing Direction Of(Event Player),
			To World, Damage, Opposite Team Of(Team Of(Event Player)), 20, 1, 0, Bad Explosion, Explosion Sound, 0, 50, 2, 0,
			Closest Player To(Event Player, Opposite Team Of(Team Of(Event Player))), 0.100);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Roadhog Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	actions
	{
		Event Player.roadhogSize = 1;
		Event Player.roadhogUlt = False;
		Loop If(Is Dead(Event Player));
	}
}

disabled rule("Roadhog Ulting")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.roadhogUlt == False;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.roadhogUlt = True;
		Set Damage Received(Event Player, 50);
		Chase Player Variable Over Time(Event Player, roadhogSize, 10, 1, Destination and Duration);
		Start Scaling Player(Event Player, Event Player.roadhogSize, True);
		Set Max Health(Event Player, 500);
		Wait(0.016, Ignore Condition);
		Set Player Health(Event Player, Max Health(Event Player));
		Wait(7.500, Ignore Condition);
		Chase Player Variable Over Time(Event Player, roadhogSize, 1, 1, Destination and Duration);
		Wait(1, Ignore Condition);
		Set Damage Received(Event Player, 100);
		Set Max Health(Event Player, 100);
		disabled Wait(0.016, Ignore Condition);
		disabled Set Player Health(Event Player, Max Health(Event Player));
		Stop Scaling Player(Event Player);
		Event Player.roadhogUlt = False;
	}
}

disabled rule("Sigma")
{
	event
	{
		Player Dealt Damage;
		All;
		Sigma;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Create Homing Projectile(Sigma Hypersphere, Event Player, Event Player, Victim, To World, Damage, Opposite Team Of(Team Of(
			Event Player)), 10, 1, 0, Bad Explosion, Explosion Sound, 0, 10, 5, 0, Victim, 1);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Sojourn Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 8;
	}
}

disabled rule("Sojourn Ulting")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sojourn;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is Alive(Event Player) == True;
		Event Player.ultCooldownTimer[0] > 0;
	}

	actions
	{
		Create Homing Projectile(Echo Sticky Bomb, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player), To World,
			Damage, Opposite Team Of(Team Of(Event Player)), 50, 1, 0, Bad Explosion, Explosion Sound, 0, 50, 5, 0, Ray Cast Hit Player(
			Eye Position(Event Player), Facing Direction Of(Event Player) * 100, All Players(Opposite Team Of(Team Of(Event Player))),
			Event Player, True), 0.500);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Soldier 76 Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Alive(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Wait(1.200, Ignore Condition);
		Event Player.soldierUlt = True;
		Event Player.ultCooldownTimer[0] = 6;
		Set Max Ammo(Event Player, 0, 999);
		Set Ammo(Event Player, 0, 999);
		disabled Start Facing(Event Player, Direction Towards(Position Of(Event Player), Position Of(Closest Player To(Event Player,
			Opposite Team Of(Team Of(Event Player))))), 300, To World, Direction and Turn Rate);
		disabled Start Facing(Event Player, Direction Towards(Eye Position(Event Player), All Living Players(Opposite Team Of(Team Of(
			Event Player)))), 300, To World, Direction and Turn Rate);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), All Living Players(Opposite Team Of(Team Of(
			Event Player)))), 300, To World, Direction and Turn Rate);
	}
}

disabled rule("Soldier 76 Aim List Update")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.soldierUlt == True;
		Event Player.ultCooldownTimer[0] > 0;
	}

	actions
	{
		Event Player.soldierTargetList = Null;
		Event Player.soldierTemp = Filtered Array(Players Within Radius(Event Player, 25, Opposite Team Of(Team Of(Event Player)),
			Surfaces), Is Alive(Event Player) == True);
		For Player Variable(Event Player, soldierLoop, 0, Count Of(Event Player.soldierTemp), 1);
			Event Player.soldierTarget = Event Player.soldierTemp[Event Player.soldierLoop];
			If(Is Alive(Event Player.soldierTarget));
				If(Hero Of(Event Player.soldierTarget) == Hero(Orisa));
					If(Is Using Ability 2(Event Player.soldierTarget) == True);
						Event Player.soldierTemp[Event Player.soldierLoop] = Null;
					End;
				Else If(Hero Of(Event Player.soldierTarget) == Hero(Doomfist));
					If(Is Using Ability 2(Event Player.soldierTarget) == True);
						Event Player.soldierTemp[Event Player.soldierLoop] = Null;
					End;
				Else If(Hero Of(Event Player.soldierTarget) == Hero(Genji));
					If(Is Using Ability 2(Event Player.soldierTarget) == True);
						Event Player.soldierTemp[Event Player.soldierLoop] = Null;
					End;
				Else If(Hero Of(Event Player.soldierTarget) == Hero(Mei));
					If(Is Using Ability 1(Event Player.soldierTarget) == True);
						Event Player.soldierTemp[Event Player.soldierLoop] = Null;
					End;
				Else If(Hero Of(Event Player.soldierTarget) == Hero(Kiriko));
					If(Is Using Ability 2(Event Player.soldierTarget) == True);
						Event Player.soldierTemp[Event Player.soldierLoop] = Null;
					End;
				Else If(Hero Of(Event Player.soldierTarget) == Hero(Moira));
					If(Is Using Ability 1(Event Player.soldierTarget) == True);
						Event Player.soldierTemp[Event Player.soldierLoop] = Null;
					End;
				Else If(Hero Of(Event Player.soldierTarget) == Hero(Reaper));
					If(Is Using Ability 1(Event Player.soldierTarget) == True);
						Event Player.soldierTemp[Event Player.soldierLoop] = Null;
					End;
				Else If(Hero Of(Event Player.soldierTarget) == Hero(Zarya));
					If(Is Using Ability 1(Event Player.soldierTarget) == True);
						Event Player.soldierTemp[Event Player.soldierLoop] = Null;
					End;
				Else If(Hero Of(Event Player.soldierTarget) == Hero(Sigma));
					If(Is Using Ability 1(Event Player.soldierTarget) == True);
						Event Player.soldierTemp[Event Player.soldierLoop] = Null;
					End;
				Else If(Hero Of(Event Player.soldierTarget) == Hero(Reinhardt));
					If(Is Button Held(Event Player.soldierTarget, Button(Secondary Fire)));
						Event Player.soldierTemp[Event Player.soldierLoop] = Null;
					End;
				Else If(Hero Of(Event Player.soldierTarget) == Hero(Sigma));
					If(Is Button Held(Event Player.soldierTarget, Button(Secondary Fire)));
						Event Player.soldierTemp[Event Player.soldierLoop] = Null;
					End;
				End;
			Else;
				Event Player.soldierTemp[Event Player.soldierLoop] = Null;
			End;
		End;
		Event Player.soldierTargetList = Sorted Array(Filtered Array(Event Player.soldierTemp, Current Array Element != 0), Health(
			Event Player));
		Event Player.soldierTemp = Null;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Soldier 76 Aim")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.soldierUlt == True;
		Event Player.ultCooldownTimer[0] > 0;
	}

	actions
	{
		If(Event Player.soldierTarget != Null);
			If(Event Player.soldierTargetList != 0);
				Start Facing(Event Player, Direction Towards(Position Of(Event Player), Event Player.soldierTargetList), 300, To World,
					Direction and Turn Rate);
			Else;
				Stop Facing(Event Player);
			End;
		Else;
			Stop Facing(Event Player);
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Soldier 76 End")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] == 0;
	}

	actions
	{
		Set Max Ammo(Event Player, 0, 30);
		Set Ammo(Event Player, 0, 30);
		Stop Facing(Event Player);
	}
}

disabled rule("Sombra")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Start Damage Over Time(Players Within Radius(Event Player, 5, Opposite Team Of(Team Of(Event Player)), Surfaces), Event Player, 5,
			25);
	}
}

disabled rule("Symmetra")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Shields, 400, True, True);
		Event Player.symHP = Last Created Health Pool;
		Wait Until(Is Dead(Event Player), 12);
		Remove Health Pool From Player(Event Player.symHP);
	}
}

disabled rule("Torbjorn Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	actions
	{
		Event Player.torbSize = 1;
	}
}

disabled rule("Torbjorn Ulting")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 15;
		Wait(2, Ignore Condition);
		Set Damage Dealt(Event Player, 150);
		Set Move Speed(Event Player, 200);
		Chase Player Variable Over Time(Event Player, torbSize, 0.100, 1, Destination and Duration);
		Start Scaling Player(Event Player, Event Player.torbSize, True);
		Wait(13, Ignore Condition);
		Chase Player Variable Over Time(Event Player, torbSize, 1, 1, Destination and Duration);
		Stop Scaling Player(Event Player);
		Set Damage Dealt(Event Player, 100);
		Set Move Speed(Event Player, 100);
	}
}

disabled rule("Tracer Store Shift POS")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Secondary Fire)) || Is Button Held(Event Player, Button(Ability 1))) == True;
		Event Player.shopNr == 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		If(Count Of(Event Player.tracerShiftPOS) < 5);
			If(Event Player.tracerShiftPOS == Null || Event Player.tracerShiftPOS == 0);
				Event Player.tracerShiftPOS = Eye Position(Event Player);
			Else;
				Modify Player Variable(Event Player, tracerShiftPOS, Append To Array, Eye Position(Event Player));
			End;
		Else;
			Modify Player Variable(Event Player, tracerShiftPOS, Remove From Array By Index, 0);
			Modify Player Variable(Event Player, tracerShiftPOS, Append To Array, Eye Position(Event Player));
		End;
	}
}

disabled rule("Tracer Ult Beam Effects")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		Count Of(Event Player.tracerShiftPOS) > 1;
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, False);
		Event Player.ultCooldownTimer[0] = 10;
		Create Beam Effect(All Players(All Teams), Zarya Particle Beam, Event Player.tracerShiftPOS[0], Event Player.tracerShiftPOS[1],
			Color(Team 1), Visible To Position and Radius);
		Event Player.tracerBeams[0] = Last Created Entity;
		If(Event Player.tracerShiftPOS[2] != Null);
			Create Beam Effect(All Players(All Teams), Zarya Particle Beam, Event Player.tracerShiftPOS[1], Event Player.tracerShiftPOS[2],
				Color(Team 1), Visible To Position and Radius);
			Event Player.tracerBeams[1] = Last Created Entity;
			If(Event Player.tracerShiftPOS[3] != Null);
				Create Beam Effect(All Players(All Teams), Zarya Particle Beam, Event Player.tracerShiftPOS[2], Event Player.tracerShiftPOS[3],
					Color(Team 1), Visible To Position and Radius);
				Event Player.tracerBeams[2] = Last Created Entity;
				If(Event Player.tracerShiftPOS[4] != Null);
					Create Beam Effect(All Players(All Teams), Zarya Particle Beam, Event Player.tracerShiftPOS[3], Event Player.tracerShiftPOS[4],
						Color(Team 1), Visible To Position and Radius);
					Event Player.tracerBeams[3] = Last Created Entity;
					Create Beam Effect(All Players(All Teams), Zarya Particle Beam, Event Player.tracerShiftPOS[4], Event Player.tracerShiftPOS[0],
						Color(Team 1), Visible To Position and Radius);
					Event Player.tracerBeams[4] = Last Created Entity;
					disabled End;
				Else;
					Create Beam Effect(All Players(All Teams), Zarya Particle Beam, Event Player.tracerShiftPOS[3], Event Player.tracerShiftPOS[0],
						Color(Team 1), Visible To Position and Radius);
					Event Player.tracerBeams[4] = Last Created Entity;
				End;
			Else;
				Create Beam Effect(All Players(All Teams), Zarya Particle Beam, Event Player.tracerShiftPOS[2], Event Player.tracerShiftPOS[0],
					Color(Team 1), Visible To Position and Radius);
				Event Player.tracerBeams[4] = Last Created Entity;
			End;
	}
}

disabled rule("Tracer Ult Beam Damage")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Damage(Filtered Array(All Players(Team 2), Distance Between(Event Player.tracerShiftPOS[0], Event Player.tracerShiftPOS[1])), Null,
			50);
		If(Event Player.tracerShiftPOS[2] != Null);
			Damage(Filtered Array(All Players(Team 2), Distance Between(Event Player.tracerShiftPOS[1], Event Player.tracerShiftPOS[2])), Null,
				50);
			If(Event Player.tracerShiftPOS[3] != Null);
				Damage(Filtered Array(All Players(Team 2), Distance Between(Event Player.tracerShiftPOS[2], Event Player.tracerShiftPOS[3])), Null,
					50);
				If(Event Player.tracerShiftPOS[4] != Null);
					Damage(Filtered Array(All Players(Team 2), Distance Between(Event Player.tracerShiftPOS[3], Event Player.tracerShiftPOS[4])), Null,
						50);
					Damage(Filtered Array(All Players(Team 2), Distance Between(Event Player.tracerShiftPOS[4], Event Player.tracerShiftPOS[0])), Null,
						50);
					disabled End;
				Else;
					Damage(Filtered Array(All Players(Team 2), Distance Between(Event Player.tracerShiftPOS[3], Event Player.tracerShiftPOS[0])), Null,
						50);
				End;
			Else;
				Damage(Filtered Array(All Players(Team 2), Distance Between(Event Player.tracerShiftPOS[2], Event Player.tracerShiftPOS[0])), Null,
					50);
			End;
			Wait(0.016, Ignore Condition);
			Loop If Condition Is True;
	}
}

disabled rule("Tracer Ult Ends")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.tracerShiftPOS = Empty Array;
		Event Player.tracerBeams = Empty Array;
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

disabled rule("Venture Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Venture;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.ventureEnemies = Number Of Living Players(Opposite Team Of(Team Of(Event Player)));
		Event Player.ventureAttach = 0;
		Event Player.ventureUlt = True;
	}
}

disabled rule("Venture Attach")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Venture;
	}

	conditions
	{
		Event Player.ventureUlt == True;
	}

	actions
	{
		Attach Players(Players In Slot(Event Player.ventureAttach, Opposite Team Of(Team Of(Event Player))), Event Player, Vector(0, 0,
			5));
		Event Player.ventureAttach += 1;
		Loop If(Event Player.ventureAttach < Event Player.ventureEnemies);
		Wait(7, Ignore Condition);
		Detach Players(All Living Players(Opposite Team Of(Team Of(Event Player))));
		Event Player.ventureUlt = False;
	}
}

disabled rule("Widowmaker")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Event Was Critical Hit == True;
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Secondary Fire)));
			Damage(Victim, Event Player, Event Damage * 10);
		Else;
			Damage(Victim, Event Player, Event Damage * 2);
	}
}

disabled rule("Winston Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 10;
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Set Knockback Dealt(Event Player, 300);
		Wait(10, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 1), 5);
		Set Knockback Dealt(Event Player, 100);
	}
}

disabled rule("Winston Jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] > 0;
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
	}
}

disabled rule("Wrecking Ball Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 5;
		Event Player.ballPhase = 1;
		Event Player.ballStoreDMG = 0;
	}
}

disabled rule("Wrecking Ball Store Damage")
{
	event
	{
		Player Dealt Damage;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.ballPhase == 1;
		Event Player.ultCooldownTimer[0] > 0;
	}

	actions
	{
		Event Player.ballStoreDMG += Event Damage;
	}
}

disabled rule("Wrecking Ball Gain Health")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.ballPhase == 1;
		Event Player.ultCooldownTimer[0] == 0;
	}

	actions
	{
		Event Player.ballPhase = 0;
		Add Health Pool To Player(Event Player, Health, Event Player.ballStoreDMG, True, True);
		Event Player.ballTempHP = Last Created Health Pool;
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 5);
		Wait(10, Ignore Condition);
		Remove Health Pool From Player(Event Player.ballTempHP);
		Event Player.ballTempHP = Null;
	}
}

disabled rule("Zarya")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)), Surfaces), Null, Hacked, 5);
		disabled Set Status(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)), Surfaces), Null, Burning, 5);
	}
}

rule("Zenyatta Initiate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.zenUlt == False;
		Event Player.superUlt == True;
		Event Player.ultAbility == True;
	}

	actions
	{
		Event Player.ultCooldownTimer[0] = 6;
		Event Player.zenTarget = Players Within Radius(Event Player, 10.500, Team Of(Event Player), Off);
		Event Player.zenUlt = True;
	}
}

rule("Zenyatta Damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.ultCooldownTimer[0] > 0;
		Count Of(Event Player.zenTarget) > 0;
		Event Player.zenUlt == True;
	}

	actions
	{
		For Player Variable(Event Player, zenLoop, 0, Count Of(Event Player.zenTarget), 1);
			disabled Event Player.zenBeam[Event Player.zenLoop] = Last Created Entity;
			Create Homing Projectile(Symmetra Photon Projector, Event Player, Eye Position(Event Player),
				Event Player.zenTarget[Event Player.zenLoop], To World, Damage, Opposite Team Of(Team Of(Event Player)),
				Event Player.damagePercentage * 1, 1, 0, Bad Explosion, Explosion Sound, 0, 25, 5, 0,
				Event Player.zenTarget[Event Player.zenLoop], 1);
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		If(Hero Of(Event Player) == Hero(Orisa));
			If(Is Using Ability 2(Event Player) == True);
	}
}

rule("Zenyatta End")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Event Player.ultCooldownTimer[0] == 0;
		Event Player.zenUlt == True;
	}

	actions
	{
		Event Player.zenTarget = Null;
		Event Player.zenUlt = False;
	}
}

disabled rule("Test")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Event Player.speed = 100;
		Event Player.healPerSecond = 10000;
		Event Player.money = 100000000;
		Event Player.damageReceived = 1;
		Event Player.healthPercentage = 10000;
		Event Player.damagePercentage = 1000;
		disabled Event Player.projectileSpeed = 10000;
		Event Player.projectileGravity = 10000;
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Call Subroutine(updatePlayerStats);
		Start Accelerating(Event Player, Is Button Held(Event Player, Button(Jump)) && Is Alive(Event Player) ? Up : Null, 35, 4, To World,
			Direction Rate and Max Speed);
		Event Player.superUlt = True;
		disabled Event Player.ifrit = True;
		disabled Event Player.shiva = True;
		disabled Event Player.ramuh = True;
		disabled Event Player.leviathan = True;
		disabled Event Player.odin = True;
		disabled Event Player.bahamut = True;
		Set Ultimate Charge(Event Player, 100);
		Event Player.ultAbility = True;
	}
}

disabled rule("Test 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Event Player.ultAbility = True;
		Event Player.money = 100000000;
		disabled Add Health Pool To Player(Event Player, Armor, 100, True, True);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}